AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: > 
  Creates a CodePipeline for Ephemeral Environments. Uses Github V2 Source action, Build ECR Images, and deploy with SAM CLI


Parameters:

  pAppName:
    Type: String
    Description: Used to name CI/CD resources.
    Default: ephemeral

  # GitHub Repo

  pRepoOwner:
    Type: String
    Description: Owner not username. If the repo owner is an organization, enter organization name.
    Default: MadisonReed

  pRepoName:
    Type: String 
    Default: mr

  pCodestarConnectionArn:
    Type: String
    Description: ARN of the CodeStar Connection.
    Default: arn:aws:codestar-connections:us-east-1:313588322221:connection/e6cec00c-84fd-4370-b355-5291eaa602bc

  pTriggerBranch:
    Type: String
    Description: Branch to trigger CodePipeline off of.
    Default: master

  # CodeBuild

  pCodeBuildComputeType:
    Type: String
    Description: CodeBuild Compute Type
    Default: BUILD_GENERAL1_SMALL
    AllowedValues:
      - BUILD_GENERAL1_SMALL
      - BUILD_GENERAL1_MEDIUM
      - BUILD_GENERAL1_LARGE

  pCodeBuildImage:
    Type: String
    Description: Base image used by CodeBuild
    Default: aws/codebuild/standard:7.0

  # TODO: pass these params to deploy
  # # Stateful Services
  # pMongoEcrImageUri:
  #   Type: String
  #   Description: URI of the ECR image used for Mongo Task Definition.
  #   Default: public.ecr.aws/docker/library/mongo:7.0
  #   Default: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/mongo:7.0

  # pMysqlEcrImageUri:
  #   Type: String
  #   Description: URI of the ECR image used for MySQL Task Definition.
  #   Default: public.ecr.aws/docker/library/mysql:8.0

  # pRedisEcrImageUri:
  #   Type: String
  #   Description: URI of the ECR image used for Redis Task Definition.
  #   Default: public.ecr.aws/docker/library/redis:7.0.15

  # BUILDSPECPATHS
  pPilkoBuildSpecPath:
    Type: String
    Description: Path and name for the Buildspec in repo
    Default: ephemeralenv/buildspec-pilko.yml

  pLabelPRBuildSpecPath:
    Type: String
    Description: Path and name for the Buildspec in repo
    Default: ephemeralenv/buildspec-labels.yml

  pApiServerBuildSpecPath:
    Type: String
    Description: Path and name for the Buildspec in repo
    Default: ephemeralenv/buildspec-apiserver.yml

  pTophatBuildSpecPath:
    Type: String
    Description: Path and name for the Buildspec in repo
    Default: ephemeralenv/buildspec-tophat.yml

  pWebsiteBuildSpecPath:
    Type: String
    Description: Path and name for the Buildspec in repo
    Default: ephemeralenv/buildspec-website.yml

  pColoristBuildSpecPath:
    Type: String
    Description: Path and name for the Buildspec in repo
    Default: ephemeralenv/buildspec-colorist.yml

  pDeployBuildSpecPath:
    Type: String
    Description: Path and name for the Buildspec in repo
    Default: ephemeralenv/buildspec-deploy.yml

  pDeployLambdasBuildSpecPath:
    Type: String
    Description: Path and name for the Buildspec in repo
    Default: buildspec-buildlambdafunctionsv3.yml

  pHostedZoneName:
    Type: String
    Description: Route53 Hosted Zone Name
    Default: dev.mdsnrdfd.com

  # VPC params required for internal CodeBuild placement
  pVpcId:
    Type: AWS::EC2::VPC::Id
    Description: ID of the Virtual Private Network (VPC)
    Default: vpc-09ef4a53e9290ca17
  pPrivateSubnetId1:
    Type: String
    Default: subnet-01086857935bfcf34
  pPrivateSubnetId2:
    Type: String
    Default: subnet-056e57e04fea05dd5

Metadata:
  AWS::CloudFormation::Interface:
    ParameterLabels:
      pAppName:
        default: Application Name
      pRepoOwner:
        default: GitHub Repository Owner
      pRepoName:
        default: GitHub Repository Name
      pCodestarConnectionArn:
        default: Codestar Connection Arn
      pTriggerBranch:
        default: GitHub Trigger Branch
      pCodeBuildComputeType:
        default: CodeBuild Compute Type
      pCodeBuildImage:
        default: CodeBuild Docker Image

    ParameterGroups:
      - Label:
          default: CodePipeline Settings
        Parameters:
          - pAppName
      - Label:
          default: CodePipeline Source Settings
        Parameters:
          - pRepoOwner
          - pRepoName
          - pCodestarConnectionArn
          - pTriggerBranch
      - Label:
          default: CodeBuild Settings
        Parameters:
          - pCodeBuildComputeType
          - pCodeBuildImage

Resources:
  ecrApiServerRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub apiserver-${pAppName}
      EmptyOnDelete: true

  ecrTophatRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub tophat-${pAppName}
      EmptyOnDelete: true

  ecrWebsiteRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub website-${pAppName}
      EmptyOnDelete: true

  ecrColoristRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub colorist-${pAppName}
      EmptyOnDelete: true

  lambdaFunctionsRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub lambda-functions-${pAppName}-ecs
      EmptyOnDelete: true

  # IAM Role - CodeBuild
  codeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${pAppName}-build-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
        - PolicyName: GitCloneConnection # Required for CODEBUILD_CLONE_REF
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - codestar-connections:UseConnection
                Resource: 
                  - !Ref pCodestarConnectionArn
        - PolicyName: S3ArtifactBucket
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource:
                  - !Sub "arn:aws:s3:::${artifactBucket}"
                  - !Sub "arn:aws:s3:::${artifactBucket}/*"
        - PolicyName: s3ReadWrite
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - "*"
        - PolicyName: ECR
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ecr:PutLifecyclePolicy
                  - ecr:PutImageTagMutability
                  - ecr:PutImageScanningConfiguration
                  - ecr:BatchGetImage
                  - ecr:CompleteLayerUpload
                  - ecr:DescribeImages
                  - ecr:TagResource
                  - ecr:ListTagsForResource
                  - ecr:UploadLayerPart
                  - ecr:InitiateLayerUpload
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:GetDownloadUrlForLayer
                Resource:
                  - !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/mysql-ephemeral
                  - !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/mongo-ephemeral
                  - !GetAtt ecrApiServerRepo.Arn
                  - !GetAtt ecrTophatRepo.Arn
                  - !GetAtt ecrWebsiteRepo.Arn
                  - !GetAtt ecrColoristRepo.Arn
                  - !GetAtt lambdaFunctionsRepo.Arn
        - PolicyName: BASE-ECR
          PolicyDocument: 
            Version: 2012-10-17 
            Statement:  
              - Effect: Allow 
                Action: 
                  - ecr:BatchGetImage 
                  - ecr:DescribeImages  
                  - ecr:ListTagsForResource 
                  - ecr:GetDownloadUrlForLayer
                Resource: 
                  - !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/base-image
        - PolicyName: ECR-Token
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: "*"
        - PolicyName: ParamStore
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource: 
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/GITHUB/SSH_KEY"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/GITHUB/ACCESS_TOKEN"
              - Effect: Allow # Used for generateSecureConfig script
                Action:
                  - ssm:GetParameters*
                Resource: 
                  - "*"
        - PolicyName: SAMDeploy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - 
                Sid: AllowSAMBucketAccess
                Effect: Allow
                Action:
                  - s3:*
                Resource: 
                  - "arn:aws:s3:::aws-sam-cli-managed-default-*/*"
              - 
                Sid: IAMRoles
                Effect: Allow
                Action:
                  - iam:*
                Resource: arn:aws:iam::*:role/*
              - 
                Sid: Cloudformation
                Effect: Allow
                Action:
                  - cloudformation:*
                Resource: "*"
              -
                Sid: AllowResourceCreation
                Effect: Allow
                Action:
                  - acm:*
                  - apigateway:*
                  - application-autoscaling:*
                  - cloudfront:*
                  - cloudwatch:*
                  - ec2:*
                  - ecs:*
                  - elasticloadbalancing:*
                  - events:*
                  - lambda:*
                  - logs:*
                  - route53:*
                  - scheduler:*
                  - servicediscovery:*
                Resource: "*"
        # Required permissions to place CodeBuild in the VPC
        - PolicyName: CodeBuildSecurityGroupAttachment
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeDhcpOptions
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeVpcs
                  - ec2:CreateNetworkInterfacePermission
                Resource: 
                  - "*"

  codeBuildSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Internal VPC CodeBuild Security Group
      VpcId: !Ref pVpcId

  codeBuildPilko:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${pAppName}-pilko
      Artifacts:
        Type: CODEPIPELINE
      Description: Lint and approve PR with mr-github-bot
      Environment:
        ComputeType: !Ref pCodeBuildComputeType
        Image: !Ref pCodeBuildImage
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: ACCOUNT_ID  
            Value: !Ref AWS::AccountId
            Type: PLAINTEXT

          - Name: APP_NAME 
            Value: !Ref pAppName 
            Type: PLAINTEXT

      ServiceRole: !GetAtt codeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Ref pPilkoBuildSpecPath
      TimeoutInMinutes: 60
      Cache:
        Type: LOCAL
        Modes:
          - LOCAL_SOURCE_CACHE # Caches .git metadata so subsequent runs only pull change in commits

  codeBuildPilkoLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/codebuild/${codeBuildPilko}"
      RetentionInDays: 7

  codeBuildLabelPR:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${pAppName}-label-pr
      Artifacts:
        Type: CODEPIPELINE
      Description: Add Labels to PRs via Github API
      Environment:
        ComputeType: !Ref pCodeBuildComputeType
        Image: !Ref pCodeBuildImage
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: ACCOUNT_ID  
            Value: !Ref AWS::AccountId
            Type: PLAINTEXT

          - Name: APP_NAME 
            Value: !Ref pAppName 
            Type: PLAINTEXT

          - Name: GITHUB_TOKEN
            Value: /GITHUB/ACCESS_TOKEN
            Type: PARAMETER_STORE

      ServiceRole: !GetAtt codeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Ref pLabelPRBuildSpecPath
      TimeoutInMinutes: 60
      Cache:
        Type: LOCAL
        Modes:
          - LOCAL_SOURCE_CACHE # Caches .git metadata so subsequent runs only pull change in commits

  codeBuildLabelPRLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/codebuild/${codeBuildLabelPR}"
      RetentionInDays: 7

  codeBuildApiServer:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${pAppName}-apiserver
      Artifacts:
        Type: CODEPIPELINE
      Description: Build ECR image for API Server ECS service
      Environment:
        ComputeType: !Ref pCodeBuildComputeType
        Image: !Ref pCodeBuildImage
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: ACCOUNT_ID  
            Value: !Ref AWS::AccountId
            Type: PLAINTEXT

          - Name: BASE_IMAGE_REPO_NAME  
            Value: base-image
            Type: PLAINTEXT

          - Name: BASE_IMAGE_TAG
            Value: latest
            Type: PLAINTEXT 

          - Name: APP_NAME 
            Value: !Ref pAppName 
            Type: PLAINTEXT

          - Name: REPOSITORY_URI
            Value: !GetAtt ecrApiServerRepo.RepositoryUri
      # VPC required to access internal VPC resources
      VpcConfig:
        VpcId: !Ref pVpcId
        Subnets: 
          - !Ref pPrivateSubnetId1
          - !Ref pPrivateSubnetId2
        SecurityGroupIds:
          - !GetAtt codeBuildSecurityGroup.GroupId
      ServiceRole: !GetAtt codeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Ref pApiServerBuildSpecPath
      TimeoutInMinutes: 60
      Cache:
        Type: LOCAL
        Modes:
          - LOCAL_CUSTOM_CACHE
          - LOCAL_SOURCE_CACHE # Caches .git metadata so subsequent runs only pull change in commits
          - LOCAL_DOCKER_LAYER_CACHE

  codeBuildApiServerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/codebuild/${codeBuildApiServer}"
      RetentionInDays: 7

  codeBuildTophat:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${pAppName}-tophat
      Artifacts:
        Type: CODEPIPELINE
      Description: Build ECR image for Tophat ECS service
      Environment:
        ComputeType: !Ref pCodeBuildComputeType
        Image: !Ref pCodeBuildImage
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: ACCOUNT_ID  
            Value: !Ref AWS::AccountId
            Type: PLAINTEXT

          - Name: BASE_IMAGE_REPO_NAME  
            Value: base-image
            Type: PLAINTEXT

          - Name: BASE_IMAGE_TAG
            Value: latest
            Type: PLAINTEXT

          - Name: APP_NAME 
            Value: !Ref pAppName 
            Type: PLAINTEXT

          - Name: REPOSITORY_URI
            Value: !GetAtt ecrTophatRepo.RepositoryUri
      # VPC required to access internal VPC resources
      VpcConfig:
        VpcId: !Ref pVpcId
        Subnets: 
          - !Ref pPrivateSubnetId1
          - !Ref pPrivateSubnetId2
        SecurityGroupIds:
          - !GetAtt codeBuildSecurityGroup.GroupId
      ServiceRole: !GetAtt codeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Ref pTophatBuildSpecPath
      TimeoutInMinutes: 60
      Cache:
        Type: LOCAL
        Modes:
          - LOCAL_CUSTOM_CACHE
          - LOCAL_SOURCE_CACHE # Caches .git metadata so subsequent runs only pull change in commits
          - LOCAL_DOCKER_LAYER_CACHE

  codeBuildTophatLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/codebuild/${codeBuildTophat}"
      RetentionInDays: 7

  codeBuildWebsite:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${pAppName}-website
      Artifacts:
        Type: CODEPIPELINE
      Description: Build ECR image for Website ECS service
      Environment:
        ComputeType: !Ref pCodeBuildComputeType
        Image: !Ref pCodeBuildImage
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: ACCOUNT_ID  
            Value: !Ref AWS::AccountId
            Type: PLAINTEXT

          - Name: BASE_IMAGE_REPO_NAME  
            Value: base-image
            Type: PLAINTEXT

          - Name: BASE_IMAGE_TAG
            Value: latest
            Type: PLAINTEXT 

          - Name: APP_NAME 
            Value: !Ref pAppName 
            Type: PLAINTEXT

          - Name: REPOSITORY_URI
            Value: !GetAtt ecrWebsiteRepo.RepositoryUri
      # VPC required to access internal VPC resources
      VpcConfig:
        VpcId: !Ref pVpcId
        Subnets: 
          - !Ref pPrivateSubnetId1
          - !Ref pPrivateSubnetId2
        SecurityGroupIds:
          - !GetAtt codeBuildSecurityGroup.GroupId
      ServiceRole: !GetAtt codeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Ref pWebsiteBuildSpecPath
      TimeoutInMinutes: 60
      Cache:
        Type: LOCAL
        Modes:
          - LOCAL_CUSTOM_CACHE
          - LOCAL_SOURCE_CACHE # Caches .git metadata so subsequent runs only pull change in commits
          - LOCAL_DOCKER_LAYER_CACHE

  codeBuildWebsiteLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/codebuild/${codeBuildWebsite}"
      RetentionInDays: 7

  codeBuildColorist:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${pAppName}-colorist
      Artifacts:
        Type: CODEPIPELINE
      Description: Build ECR image for Colorist ECS service
      Environment:
        ComputeType: !Ref pCodeBuildComputeType
        Image: !Ref pCodeBuildImage
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: ACCOUNT_ID
            Value: !Ref AWS::AccountId
            Type: PLAINTEXT

          - Name: BASE_IMAGE_REPO_NAME
            Value: base-image
            Type: PLAINTEXT

          - Name: BASE_IMAGE_TAG
            Value: latest
            Type: PLAINTEXT

          - Name: APP_NAME
            Value: !Ref pAppName
            Type: PLAINTEXT

          - Name: REPOSITORY_URI
            Value: !GetAtt ecrColoristRepo.RepositoryUri
      # VPC required to access internal VPC resources
      VpcConfig:
        VpcId: !Ref pVpcId
        Subnets:
          - !Ref pPrivateSubnetId1
          - !Ref pPrivateSubnetId2
        SecurityGroupIds:
          - !GetAtt codeBuildSecurityGroup.GroupId
      ServiceRole: !GetAtt codeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Ref pColoristBuildSpecPath
      TimeoutInMinutes: 60
      Cache:
        Type: LOCAL
        Modes:
          - LOCAL_CUSTOM_CACHE
          - LOCAL_SOURCE_CACHE # Caches .git metadata so subsequent runs only pull change in commits
          - LOCAL_DOCKER_LAYER_CACHE

  codeBuildColoristLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/codebuild/${codeBuildColorist}"
      RetentionInDays: 7

  codeBuildDeploy:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${pAppName}-deploy
      Artifacts:
        Type: CODEPIPELINE
      Description: Deploy/Update Ephemeral environment
      Environment:
        ComputeType: !Ref pCodeBuildComputeType
        Image: !Ref pCodeBuildImage
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: ACCOUNT_ID  
            Value: !Ref AWS::AccountId
            Type: PLAINTEXT

          - Name: APP_NAME 
            Value: !Ref pAppName 
            Type: PLAINTEXT

          - Name: SSH_KEY_FOR_SUBMODULE
            Value: /GITHUB/SSH_KEY
            Type: PARAMETER_STORE

          # # TODO: pass these params to deploy
          # - Name: MYSQL_IMAGE_URI
          #   Value: !Ref pMysqlEcrImageUri

          # - Name: MONGO_IMAGE_URI
          #   Value: !Ref pMongoEcrImageUri

          # - Name: REDIS_IMAGE_URI
          #   Vale: !Ref pRedisEcrImageUri

          - Name: APISERVER_REPOSITORY_URI
            Value: !GetAtt ecrApiServerRepo.RepositoryUri

          - Name: TOPHAT_REPOSITORY_URI
            Value: !GetAtt ecrTophatRepo.RepositoryUri

          - Name: WEBSITE_REPOSITORY_URI
            Value: !GetAtt ecrWebsiteRepo.RepositoryUri

          - Name: COLORIST_REPOSITORY_URI
            Value: !GetAtt ecrColoristRepo.RepositoryUri

      # VPC required to access internal VPC resources
      VpcConfig:
        VpcId: !Ref pVpcId
        Subnets: 
          - !Ref pPrivateSubnetId1
          - !Ref pPrivateSubnetId2
        SecurityGroupIds:
          - !GetAtt codeBuildSecurityGroup.GroupId
      ServiceRole: !GetAtt codeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Ref pDeployBuildSpecPath
      TimeoutInMinutes: 180
      Cache:
        Type: LOCAL
        Modes:
          - LOCAL_SOURCE_CACHE # Caches .git metadata so subsequent runs only pull change in commits

  codeBuildDeployLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/codebuild/${codeBuildDeploy}"
      RetentionInDays: 7

  codeBuildLambdas:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${pAppName}-deploy-lambdas
      Artifacts:
        Type: CODEPIPELINE
      Description: Deploy/Update Colorist
      Environment:
        ComputeType: !Ref pCodeBuildComputeType
        Image: !Ref pCodeBuildImage
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: ACCOUNT_ID  
            Value: !Ref AWS::AccountId
            Type: PLAINTEXT

          # All these envs are required to allow connectivity from Colorist
          - Name: REDIS_HOST
            Value: !Sub redis-ecs.${pAppName}.cloudmap.internal
          - Name: MONGO_HOST
            Value: !Sub mongo-ecs.${pAppName}.cloudmap.internal
          - Name: MYSQL_HOST
            Value: !Sub mysql-ecs.${pAppName}.cloudmap.internal
          - Name: MYSQL_PASSWORD
            Value: root
          - Name: MYSQL_USER
            Value: root

          - Name: EPHEMERAL_ID 
            Value: !Ref pAppName 
            Type: PLAINTEXT

          - Name: DOMAIN_NAME
            Value: !Sub ${pAppName}.${pHostedZoneName}
          
          - Name: COLOR_ADVISOR_API_URL
            Value: !Sub ${pAppName}.coloradvisor.${pHostedZoneName}/coloradvisor/

          # Gulp Lambda config
          - Name: GULP_LAMBDA_API_ID # Empty API GW (REMOVE!)
            Value: asct374564
          - Name: GULP_LAMBDA_IAM_ROLE_ARN # Lambda Execution Role ARN
            Value: !Sub arn:aws:iam::${AWS::AccountId}:role/ConsumerLambdaRole
          - Name: GULP_LAMBDA_SECURITY_GROUP_ID # SG for Lambdas to be in VPC
            Value: sg-08d325adcfc900ceb 
          - Name: GULP_LAMBDA_SUBNET_ID # Private1a Subnet
            Value: subnet-01086857935bfcf34
      # VPC required to access internal VPC resources
      VpcConfig:
        VpcId: !Ref pVpcId
        Subnets: 
          - !Ref pPrivateSubnetId1
          - !Ref pPrivateSubnetId2
        SecurityGroupIds:
          - !GetAtt codeBuildSecurityGroup.GroupId
      ServiceRole: !GetAtt codeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Ref pDeployLambdasBuildSpecPath
      TimeoutInMinutes: 180

  codeBuildDeployLambdasLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/codebuild/${codeBuildLambdas}"
      RetentionInDays: 7

  # IAM Role - CodePipeline
  codePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${pAppName}-pipeline-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: s3Artifacts
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource: 
                  - !Sub "arn:aws:s3:::${artifactBucket}"
                  - !Sub "arn:aws:s3:::${artifactBucket}/*"
        - PolicyName: codeBuildTrigger
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuildBatches
                  - codebuild:StartBuildBatch
                Resource: 
                  - !GetAtt codeBuildPilko.Arn
                  - !GetAtt codeBuildLabelPR.Arn
                  - !GetAtt codeBuildApiServer.Arn
                  - !GetAtt codeBuildTophat.Arn
                  - !GetAtt codeBuildWebsite.Arn
                  - !GetAtt codeBuildColorist.Arn
                  - !GetAtt codeBuildDeploy.Arn
                  - !GetAtt codeBuildLambdas.Arn
              - Effect: Allow
                Action:
                  - codestar-connections:UseConnection
                Resource: 
                  - !Ref pCodestarConnectionArn
        - PolicyName: ecsUpdate
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ecs:*
                  - ecr:*
                Resource:
                  - "*"
        - PolicyName: iamPassRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: 
                  - "*"

 # CodePipeline

  artifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${pAppName}-pipeline-artifacts-${AWS::AccountId}-${AWS::Region}
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # Artifact bucket cleanup
  DeleteObjectStorage:
    Type: Custom::S3DeleteObjectsLambda
    Properties:
      ServiceToken: !GetAtt DeleteS3ObjectsFunction.Arn
      Bucket: !Ref artifactBucket

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: S3Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Sid: AllowLogging
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              -
                Sid: DeleteBucketObjects
                Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:ListBucketVersions"
                  - "s3:GetObject"
                  - "s3:DeleteObject"
                  - "s3:DeleteObjectVersion"
                  - "s3:PutBucketPolicy"
                Resource:
                  - !Sub "arn:aws:s3:::${artifactBucket}"
                  - !Sub "arn:aws:s3:::${artifactBucket}/*"

  DeleteS3ObjectsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Deletes objects from buckets provisioned by CloudFormation
      Handler: index.handler
      Runtime: python3.9
      Role: !GetAtt LambdaRole.Arn
      Timeout: 120
      Code:
        ZipFile: |
          import os 
          import json
          import cfnresponse
          import boto3
          import logging

          from botocore.exceptions import ClientError

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          s3 = boto3.resource('s3')

          def handler(event, context):
            logger.info("Received event: %s" % json.dumps(event))
            bucket = s3.Bucket(event['ResourceProperties']['Bucket'])

            try:
                # No work on Create/Update
                if event['RequestType'] == 'Delete':
                    delete_objects(bucket)
                # If we get here, everything succeeded
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
            except Exception as e:
                # Log full stack and notify CloudFormation of failure
                logger.exception("Cleanup failed")
                cfnresponse.send(event, context, cfnresponse.FAILED, {})

          def delete_objects(bucket):   
            name = bucket.name
            # 1) Attach Deny policy to block new uploads
            deny_policy = {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Deny",
                "Principal": "*",
                "Action": "s3:PutObject",
                "Resource": f"arn:aws:s3:::{name}/*"
              }]
            }
            bucket.Policy().put(Policy=json.dumps(deny_policy))

            # 2) Delete all objects in the bucket
            bucket.object_versions.delete()
            bucket.objects.all().delete()
            return cfnresponse.SUCCESS
      Tags:
        - Key: resource:createdBy
          Value: Cloudformation
            
  cleanupLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${DeleteS3ObjectsFunction}
      RetentionInDays: 7

  codePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      PipelineType: V2
      RestartExecutionOnUpdate: false

      Name: !Sub ${pAppName}-pipeline
      RoleArn: !GetAtt codePipelineServiceRole.Arn

      ArtifactStore:
        Location: !Ref artifactBucket
        Type: S3

      Variables:
        - Name: PR_ID
          Description: Pull Request ID (e.g. 123456)

        - Name: PR_EVENT
          Description: 'Type of PR event. Valid values: [opened, synchronize, reopened, closed]'
          
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              Namespace: SourceVariables
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              Configuration:
                FullRepositoryId: !Sub ${pRepoOwner}/${pRepoName}
                ConnectionArn: !Ref pCodestarConnectionArn
                BranchName: !Ref pTriggerBranch
                DetectChanges: false
                OutputArtifactFormat: CODEBUILD_CLONE_REF # Code Build Git Full Clone
              OutputArtifacts:
                - Name: SourceArtifact

        - Name: Build
          Actions:
            # - Name: CheckLint   # TODO: disabled why?
            #   ActionTypeId:
            #     Category: Build
            #     Owner: AWS
            #     Provider: CodeBuild
            #     Version: 1
            #   Configuration:
            #     ProjectName: !Ref codeBuildPilko
            #     # Override existing or add additional env vars to the buildproject
            #     EnvironmentVariables: '[{"name": "PULL_REQUEST_ID", "value": "#{variables.PR_ID}"}, {"name": "PR_EVENT", "value": "#{variables.PR_EVENT}"}]'
            #   InputArtifacts:
            #     - Name: SourceArtifact
            #   OutputArtifacts:
            #     - Name: BuildArtifactPilko
            #   RunOrder: 1

            - Name: CheckConflicts
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref codeBuildLabelPR
                # Override existing or add additional env vars to the buildproject
                EnvironmentVariables: '[{"name": "PULL_REQUEST_ID", "value": "#{variables.PR_ID}"}, {"name": "PR_EVENT", "value": "#{variables.PR_EVENT}"}]'
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifactLabelPR
              RunOrder: 1

            - Name: ManualApproval
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: 1
              Configuration:
                CustomData: "Approve ephemeral deployment. Pull Request#: #{variables.PR_ID}"
                ExternalEntityLink: !Sub "https://github.com/${pRepoOwner}/${pRepoName}/commit/#{SourceVariables.CommitId}"
              RunOrder: 2

            - Name: BuildApiServer
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref codeBuildApiServer
                EnvironmentVariables: '[{"name": "PULL_REQUEST_ID", "value": "#{variables.PR_ID}"}, {"name": "PR_EVENT", "value": "#{variables.PR_EVENT}"}]'
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifactApiServer
              RunOrder: 3

            - Name: BuildTophat
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref codeBuildTophat
                EnvironmentVariables: '[{"name": "PULL_REQUEST_ID", "value": "#{variables.PR_ID}"}, {"name": "PR_EVENT", "value": "#{variables.PR_EVENT}"}]'
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifactTophat
              RunOrder: 3

            - Name: BuildWebsite
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref codeBuildWebsite
                EnvironmentVariables: '[{"name": "PULL_REQUEST_ID", "value": "#{variables.PR_ID}"}, {"name": "PR_EVENT", "value": "#{variables.PR_EVENT}"}]'
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifactWebsite
              RunOrder: 3

            - Name: BuildColorist
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref codeBuildColorist
                EnvironmentVariables: '[{"name": "PULL_REQUEST_ID", "value": "#{variables.PR_ID}"}, {"name": "PR_EVENT", "value": "#{variables.PR_EVENT}"}]'
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifactColorist
              RunOrder: 3

        - Name: Deploy
          Actions:
            - Name: DeployServices
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref codeBuildDeploy
                EnvironmentVariables: '[{"name": "PULL_REQUEST_ID", "value": "#{variables.PR_ID}"}, {"name": "PR_EVENT", "value": "#{variables.PR_EVENT}"}]'
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
              RunOrder: 1

            - Name: DeployLambdas
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref codeBuildLambdas
                EnvironmentVariables: '[{"name": "PULL_REQUEST_ID", "value": "#{variables.PR_ID}"}, {"name": "PR_EVENT", "value": "#{variables.PR_EVENT}"}]'
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifactLambdas
              RunOrder: 2

Outputs:
  Version:
    Description: Template Version
    Value: ephemeral-pipeline-1.0
