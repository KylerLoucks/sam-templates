
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Deploys ECS Fargate services, linked together through ECS Service Connect

Parameters:
  pAppName:
    Type: String
    Default: pr1
    Description: Application Name
  pVpcId:
    Type: AWS::EC2::VPC::Id
    Description: ID of the Virtual Private Network (VPC)
  pPrivateSubnetId1:
    Type: String
  pPrivateSubnetId2:
    Type: String

  # Container Ports
  pWebsitePort:
    Type: Number
    Default: 80
  pMongoPort:
    Type: Number
    Default: 27017
  pRedisPort:
    Type: Number
    Default: 6379
  pMySQLPort:
    Type: Number
    Default: 3306
  pPostgresPort:
    Type: Number
    Default: 5432

  # ECR repos
  pWebsiteEcrImageUri:
    Type: String
    Description: > 
      URI of the ECR image used for Website Task Definition. 
      e.g. <account-id>.dkr.ecr.us-east-1.amazonaws.com/repository:tag


Resources:

  



  # ==============================================
  # ================= LOG GROUPS =================
  # ==============================================

  websiteLogGroup:
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/website/${pAppName}
      RetentionInDays: 7

  redisLogGroup:
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/redis/${pAppName}
      RetentionInDays: 7

  postgresLogGroup:
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/postgres/${pAppName}
      RetentionInDays: 7

  mysqlLogGroup:
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/mysql/${pAppName}
      RetentionInDays: 7

  mongoLogGroup:
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/mongo/${pAppName}
      RetentionInDays: 7

  # ===================================================
  # ================= SECURITY GROUPS =================
  # ===================================================
  
  # BACKEND SERVICES
  serviceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all traffic from self and ALB Security Group
      VpcId: !Ref pVpcId

  # Allow everything that has this security group attached
  serviceSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt serviceSecurityGroup.GroupId
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !GetAtt serviceSecurityGroup.GroupId

  serviceVpcIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt serviceSecurityGroup.GroupId
      IpProtocol: -1  # Allows all protocols
      FromPort: -1    # Allows all ports
      ToPort: -1      # Allows all ports
      CidrIp: 10.20.0.0/16  # Allow traffic from VPC


  # ECS task role
  taskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument: 
            Version: 2012-10-17
            Statement:
              - Sid: AllowCreateLogGroup
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Sid: AllowLogStreams
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/ecs/*:*"
        
  taskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      # Allows pulling ECR image and pushing logs to CW
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy


  # ====================================================
  # ================= TASK DEFINITIONS =================
  # ====================================================

  # WEBSITE
  websiteTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !GetAtt taskExecutionRole.Arn
      TaskRoleArn: !GetAtt taskRole.Arn
      Cpu: 4096
      Memory: 8192
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      # EphemeralStorage:
      #   SizeInGiB: 20
        
      ContainerDefinitions:
        - Name: website
          # changes to the Image will cause a new deployment to the ECS service, replacing the old deployment.
          Image: !Ref pWebsiteEcrImageUri
          PortMappings:
            - Name: website
              ContainerPort: !Ref pWebsitePort
              Protocol: tcp # tcp | udp
              AppProtocol: http
          Environment:
            # REDIS
            - Name: REDIS_HOST
              Value: !Sub redis.${pAppName}.cloudmap.internal # Reference Cloud Map Namespace
            - Name: REDIS_PORT
              Value: !Ref pRedisPort

            # MYSQL
            - Name: MYSQL_HOST
              Value: !Sub mysql.${pAppName}.cloudmap.internal
            - Name: MYSQL_PORT
              Value: !Ref pMySQLPort
            - Name: MYSQL_USER
              Value: root
            - Name: MYSQL_PASSWORD
              Value: root
            - Name: MYSQL_DB
              Value: mysql

            # POSTGRES
            - Name: POSTGRES_HOST
              Value: !Sub postgres.${pAppName}.cloudmap.internal
            - Name: POSTGRES_PORT
              Value: !Ref pPostgresPort
            - Name: POSTGRES_USER
              Value: postgres
            - Name: POSTGRES_PASSWORD
              Value: postgres
            - Name: POSTGRES_DB
              Value: postgres

            # MONGO
            - Name: MONGO_HOST
              Value: !Sub mongo.${pAppName}.cloudmap.internal
            - Name: MONGO_PORT
              Value: !Ref pMongoPort


          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref websiteLogGroup
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: ecs

  # REDIS
  redisTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !GetAtt taskExecutionRole.Arn
      TaskRoleArn: !GetAtt taskRole.Arn
      Cpu: 4096
      Memory: 8192
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      EphemeralStorage:
        SizeInGiB: 30
        
      ContainerDefinitions:
        - Name: redis
          # changes to the Image will cause a new deployment to the ECS service, replacing the old deployment.
          Image: redis:latest
          PortMappings:
            - Name: redis
              ContainerPort: !Ref pRedisPort
              Protocol: tcp # tcp | udp
              # appProtocol: DONT SET THIS. REDIS DOES NOT WORK THROUGH HTTP
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref redisLogGroup
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: ecs

  # MYSQL
  mysqlTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !GetAtt taskExecutionRole.Arn
      TaskRoleArn: !GetAtt taskRole.Arn
      Cpu: 4096
      Memory: 8192
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      EphemeralStorage:
        SizeInGiB: 200
        
      ContainerDefinitions:
        - Name: mysql
          # changes to the Image will cause a new deployment to the ECS service, replacing the old deployment.
          Image: 174743933558.dkr.ecr.us-east-1.amazonaws.com/mysql-ephemeral
          PortMappings:
            - Name: mysql
              ContainerPort: !Ref pMySQLPort
              Protocol: tcp # tcp | udp
          Environment:
            # Commented out when using a docker image that has a database already defined
            # - Name: MYSQL_DATABASE
            #   Value: mysql
            - Name: MYSQL_ROOT_PASSWORD
              Value: root
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref mysqlLogGroup
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: ecs

  # POSTGRES
  postgresTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !GetAtt taskExecutionRole.Arn
      TaskRoleArn: !GetAtt taskRole.Arn
      Cpu: 4096
      Memory: 8192
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      # EphemeralStorage:
      #   SizeInGiB: 20
        
      ContainerDefinitions:
        - Name: postgres
          # changes to the Image will cause a new deployment to the ECS service, replacing the old deployment.
          Image: postgres:latest
          PortMappings:
            - Name: postgres
              ContainerPort: !Ref pPostgresPort
              Protocol: tcp # tcp | udp
          Environment:
            - Name: POSTGRES_USER
              Value: postgres
            - Name: POSTGRES_PASSWORD
              Value: postgres
            - Name: POSTGRES_DB
              Value: postgres
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref postgresLogGroup
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: ecs


  # MONGO
  mongoTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !GetAtt taskExecutionRole.Arn
      TaskRoleArn: !GetAtt taskRole.Arn
      Cpu: 4096
      Memory: 8192
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      EphemeralStorage:
        SizeInGiB: 30
        
      ContainerDefinitions:
        - Name: mongo
          # changes to the Image will cause a new deployment to the ECS service, replacing the old deployment.
          Image: 174743933558.dkr.ecr.us-east-1.amazonaws.com/mongo
          PortMappings:
            - Name: mongo
              ContainerPort: !Ref pMongoPort
              Protocol: tcp # tcp | udp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref mongoLogGroup
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: ecs



  # ===================================================
  # ================= FARGATE CLUSTER =================
  # ===================================================

  # Service Discovery/Connect Namespace (AWS Cloud Map)
  # Creates Private Route53 hosted zone matching the 'Name' property

  # "If you name the namespace 'example.com' and an ECS service 'backend' the resulting DNS name for this service is: 'backend.example.com'"
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-privatednsnamespace.html
  serviceDiscoveryNameSpace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Vpc: !Ref pVpcId
      Name: !Sub ${pAppName}.cloudmap.internal


  # mysql
  mysqlServiceDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: mysql-ecs # Name must be unique from what is given for ECS service 'ServiceConnectConfiguration.PortName'. 
      Description: Service discovery for mongo service
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 60
          - Type: SRV
            TTL: 60
        RoutingPolicy: MULTIVALUE
      NamespaceId: !GetAtt serviceDiscoveryNameSpace.Id

  # postgres
  postgresServiceDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: postgres-ecs # Name must be unique from what is given for ECS service 'ServiceConnectConfiguration.PortName'. 
      Description: Service discovery for mongo service
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 60
          - Type: SRV
            TTL: 60
        RoutingPolicy: MULTIVALUE
      NamespaceId: !GetAtt serviceDiscoveryNameSpace.Id

  # mongo
  mongoServiceDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: mongo-ecs # Name must be unique from what is given for ECS service 'ServiceConnectConfiguration.PortName'. 
      Description: Service discovery for mongo service
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 60
          - Type: SRV
            TTL: 60
        RoutingPolicy: MULTIVALUE
      NamespaceId: !GetAtt serviceDiscoveryNameSpace.Id


  # Redis
  redisServiceDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: redis-ecs # Name must be unique from what is given for ECS service 'ServiceConnectConfiguration.PortName'. 
      Description: Service discovery for redis service
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 60
          - Type: SRV
            TTL: 60
        RoutingPolicy: MULTIVALUE
      NamespaceId: !GetAtt serviceDiscoveryNameSpace.Id

  # Website
  # Used to be able to connect via VPN and DNS route to the Web UI (DNS record could be stale)
  websiteServiceDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: madisonreed # Name must be unique from what is given for ECS service 'ServiceConnectConfiguration.PortName'. 
      Description: Service discovery for website service
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 60
          - Type: SRV
            TTL: 60
        RoutingPolicy: MULTIVALUE
      NamespaceId: !GetAtt serviceDiscoveryNameSpace.Id

  fargateCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${pAppName}-cluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Base: 0 # how many tasks (minimum) can be ran on this strategy
          Weight: 50
        - CapacityProvider: FARGATE
          Base: 20
          Weight: 50
      ServiceConnectDefaults: # AWS Service Connect
        Namespace: !GetAtt serviceDiscoveryNameSpace.Arn



  # ================================================
  # ================= ECS SERVICES =================
  # ================================================

  ecsWebsiteService:
    # Dependency is required due to the fact that we must deploy backwards 
    # from a traditional deployment (database > API > Web UI)
    DependsOn:
      - redisService
      - mongoService
      - mysqlService
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref fargateCluster
      ServiceName: website
      DeploymentController: 
        Type: ECS
      DesiredCount: 1
      EnableECSManagedTags: true
      EnableExecuteCommand: true
      LaunchType: FARGATE
      # Allows the ability for updates to create a new task before draining the old task.
      # https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DeploymentConfiguration.html
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !GetAtt serviceSecurityGroup.GroupId
          Subnets: 
            - !Ref pPrivateSubnetId1
            - !Ref pPrivateSubnetId2
      PlatformVersion: LATEST
      PropagateTags: SERVICE
      # Expose containers running on this Service to Cloud Map Service Connect.
      # Allows using Cloud Map to connect ECS Services between/within clusters without ELBs
      ServiceConnectConfiguration:
        Enabled: true
        Services:
          - PortName: website
            ClientAliases:
              - Port: !Ref pWebsitePort
        # Service Connect Agent logs location
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref websiteLogGroup
            awslogs-region: !Sub ${AWS::Region}
            awslogs-stream-prefix: service-connect-agent
      # Used to connect via Route53 record for Private DNS (VPN only)
      ServiceRegistries: 
        - RegistryArn: !GetAtt websiteServiceDiscoveryService.Arn
          Port: !Ref pWebsitePort
      TaskDefinition: !Ref websiteTaskDefinition
      Tags: 
        - Key: managed-by
          Value: SAM

  redisService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref fargateCluster
      ServiceName: redis
      DeploymentController: 
        Type: ECS
      DesiredCount: 1
      EnableECSManagedTags: true
      EnableExecuteCommand: true
      LaunchType: FARGATE
      # Allows the ability for updates to create a new task before draining the old task.
      # https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DeploymentConfiguration.html
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !GetAtt serviceSecurityGroup.GroupId
          Subnets: 
            - !Ref pPrivateSubnetId1
            - !Ref pPrivateSubnetId2
      PlatformVersion: LATEST
      PropagateTags: SERVICE
      # Expose containers running on this Service to Cloud Map Service Connect.
      # Allows using Cloud Map to connect ECS Services between/within clusters without ELBs
      ServiceConnectConfiguration:
        Enabled: true
        Services:
          - PortName: redis # Points to the "PortMappings.Name" defined at the Task Definition
            ClientAliases:
              - Port: !Ref pRedisPort
        # Service Connect Agent logs location
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref redisLogGroup
            awslogs-region: !Sub ${AWS::Region}
            awslogs-stream-prefix: service-connect-agent
      ServiceRegistries: 
        - RegistryArn: !GetAtt redisServiceDiscoveryService.Arn
          Port: !Ref pRedisPort
      TaskDefinition: !Ref redisTaskDefinition
      Tags: 
        - Key: managed-by
          Value: SAM
  
  mysqlService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref fargateCluster
      ServiceName: mysql
      DeploymentController: 
        Type: ECS
      DesiredCount: 1
      EnableECSManagedTags: true
      EnableExecuteCommand: true
      LaunchType: FARGATE
      # Allows the ability for updates to create a new task before draining the old task.
      # https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DeploymentConfiguration.html
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !GetAtt serviceSecurityGroup.GroupId
          Subnets: 
            - !Ref pPrivateSubnetId1
            - !Ref pPrivateSubnetId2
      PlatformVersion: LATEST
      PropagateTags: SERVICE
      # Expose containers running on this Service to Cloud Map Service Connect.
      # Allows using Cloud Map to connect ECS Services between/within clusters without ELBs
      ServiceConnectConfiguration:
        Enabled: true
        Services:
          - PortName: mysql # Points to the "PortMappings.Name" defined at the Task Definition
            ClientAliases:
              - Port: !Ref pMySQLPort
        # Service Connect Agent logs location
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref mysqlLogGroup
            awslogs-region: !Sub ${AWS::Region}
            awslogs-stream-prefix: service-connect-agent
      ServiceRegistries: 
        - RegistryArn: !GetAtt mysqlServiceDiscoveryService.Arn
          Port: !Ref pMySQLPort
      TaskDefinition: !Ref mysqlTaskDefinition
      Tags: 
        - Key: managed-by
          Value: SAM


  postgresService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref fargateCluster
      ServiceName: postgres
      DeploymentController: 
        Type: ECS
      DesiredCount: 1
      EnableECSManagedTags: true
      EnableExecuteCommand: true
      LaunchType: FARGATE
      # Allows the ability for updates to create a new task before draining the old task.
      # https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DeploymentConfiguration.html
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !GetAtt serviceSecurityGroup.GroupId
          Subnets: 
            - !Ref pPrivateSubnetId1
            - !Ref pPrivateSubnetId2
      PlatformVersion: LATEST
      PropagateTags: SERVICE
      # Expose containers running on this Service to Cloud Map Service Connect.
      # Allows using Cloud Map to connect services between/within clusters without ELBs
      ServiceConnectConfiguration:
        Enabled: true
        Services:
          - PortName: postgres # Points to the "PortMappings.Name" defined at the Task Definition
            ClientAliases:
              - Port: !Ref pPostgresPort
        # Service Connect Agent logs location
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref postgresLogGroup
            awslogs-region: !Sub ${AWS::Region}
            awslogs-stream-prefix: service-connect-agent
      ServiceRegistries: 
        - RegistryArn: !GetAtt postgresServiceDiscoveryService.Arn
          Port: !Ref pPostgresPort
      TaskDefinition: !Ref postgresTaskDefinition
      Tags: 
        - Key: managed-by
          Value: SAM

  mongoService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref fargateCluster
      ServiceName: mongo
      DeploymentController: 
        Type: ECS
      DesiredCount: 1
      EnableECSManagedTags: true
      EnableExecuteCommand: true
      LaunchType: FARGATE
      # Allows the ability for updates to create a new task before draining the old task.
      # https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DeploymentConfiguration.html
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !GetAtt serviceSecurityGroup.GroupId
          Subnets: 
            - !Ref pPrivateSubnetId1
            - !Ref pPrivateSubnetId2
      PlatformVersion: LATEST
      PropagateTags: SERVICE
      # Expose containers running on this Service to Cloud Map Service Connect.
      # Allows using Cloud Map to connect services between/within clusters without ELBs
      ServiceConnectConfiguration:
        Enabled: true
        Services:
          - PortName: mongo # Points to the "PortMappings.Name" defined at the Task Definition
            ClientAliases:
              - Port: !Ref pMongoPort
        # Service Connect Agent logs location
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref mongoLogGroup
            awslogs-region: !Sub ${AWS::Region}
            awslogs-stream-prefix: service-connect-agent
      ServiceRegistries: 
        - RegistryArn: !GetAtt mongoServiceDiscoveryService.Arn
          Port: !Ref pMongoPort
      TaskDefinition: !Ref mongoTaskDefinition
      Tags: 
        - Key: managed-by
          Value: SAM





Outputs:
  websiteUrl:
    Description: Application URL endpoint
    Value: !Sub http://madisonreed.${pAppName}.cloudmap.internal

  
