AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Color Advisor API

Globals:
  Function:
    Timeout: 90
    Runtime: nodejs16.x
    Environment:
      Variables:
        NODE_ENV: !Ref NodeEnv
        EPSAGON_METADATA: False
        EPSAGON_TOKEN: !Ref EpsagonToken
    Layers:
      - !Ref AdvisorNodeModulesLayer
      - !Ref MRModulesLayer
      # - arn:aws:lambda:us-east-1:222286259312:layer:mr-modules:129
      - !Ref ColorAdvisorLayer
    VpcConfig:
      SecurityGroupIds:
        - !Ref MSSecGroupA
        - !Ref MSSecGroupB
      SubnetIds:
        - !Ref MSSubnet
    Handler: /opt/nodejs/node_modules/epsagon.wrapper

Parameters:

  pACMCertificateArn:
    Type: String
    Description: ACM cert ARN for API Domain

  pR53HostedZoneName:
    Type: String
    Description: Name of the Route53 hosted zone (e.g. dev.mdsnrdfd.com)

  pDomainPrefix:
    Type: String
    Default: coloradvisor
  
  pR53HostedZoneId:
    Type: String
    Description: Route 53 hosted zone ID

  RestAPIName:
    Type: String
    Description: REST API Name

  NodeEnv:
    Description: "Required. Set Node Environment Variable"
    Type: "String"
  EpsagonToken:
    Description: "Required. Epsagon token"
    Type: "String"
  MSSubnet:
    Description: "Required. Subnet"
    Type: "String"
  MSSecGroupA:
    Description: "Required. Primary Security Group"
    Type: "String"
  MSSecGroupB:
    Description: "Required. Secondary Security Group"
    Type: "String"

Resources:

  ColorAdvisorAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: base
      Name: !Ref RestAPIName
      AlwaysDeploy: true
      EndpointConfiguration:
        Type: EDGE
      Domain: 
        DomainName: !Sub ${pDomainPrefix}.${pR53HostedZoneName}
        CertificateArn: !Ref pACMCertificateArn
        EndpointConfiguration: EDGE
        Route53:
          HostedZoneId: !Ref pR53HostedZoneId
        BasePath:
          - coloradvisor

  # Swagger
  SwaggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/ConsumerLambdaRole
      CodeUri: .build/api/swagger/
      Handler: index.handler
      Events:
        HttpEvent:
          Type: Api
          Properties:
            Path: /docs
            Method: ANY
            RestApiId: !Ref ColorAdvisorAPI
        WarmingSchedule:
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes)
            Input: '{ "warmer":true,"concurrency":8 }'
  # Options
  OptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/ConsumerLambdaRole
      CodeUri: .build/api
      Handler: options.handler
      Timeout: 90
      Events:
        ColorAdvisorAPI:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: OPTIONS
            RestApiId: !Ref ColorAdvisorAPI
        WarmingSchedule:
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes)
            Input: '{ "warmer":true,"concurrency":8 }'
  # RuleSets
  RuleSetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/ConsumerLambdaRole
      CodeUri: .build/api/ruleSet/
      Handler: index.handler
      Timeout: 90
      Events:
        RootPath:
          Type: Api
          Properties:
            Path: /ruleSet
            Method: ANY
            RestApiId: !Ref ColorAdvisorAPI
        WithParams:
          Type: Api
          Properties:
            Path: /ruleSet/{id}
            Method: ANY
            RestApiId: !Ref ColorAdvisorAPI
        WarmingSchedule:
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes)
            Input: '{ "warmer":true,"concurrency":8 }'
  # RecommendationSets
  RecommendationSetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/ConsumerLambdaRole
      CodeUri: .build/api/recommendationSet/
      Handler: index.handler
      Timeout: 90
      Events:
        RootPath:
          Type: Api
          Properties:
            Path: /recommendationSet
            Method: ANY
            RestApiId: !Ref ColorAdvisorAPI
        WithParams:
          Type: Api
          Properties:
            Path: /recommendationSet/{id}
            Method: ANY
            RestApiId: !Ref ColorAdvisorAPI
        WarmingSchedule:
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes)
            Input: '{ "warmer":true,"concurrency":8 }'
  # Recommendations
  RecommendationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/ConsumerLambdaRole
      CodeUri: .build/api/recommendation/
      Handler: index.handler
      Timeout: 90
      Events:
        RootPath:
          Type: Api
          Properties:
            Path: /recommendation
            Method: ANY
            RestApiId: !Ref ColorAdvisorAPI
        WithParams:
          Type: Api
          Properties:
            Path: /recommendation/{id}
            Method: ANY
            RestApiId: !Ref ColorAdvisorAPI
        WarmingSchedule:
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes)
            Input: '{ "warmer":true,"concurrency":8 }'
  # Shades
  ShadeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/ConsumerLambdaRole
      CodeUri: .build/api/shade/
      Handler: index.handler
      Timeout: 90
      Events:
        RootPath:
          Type: Api
          Properties:
            Path: /shade
            Method: ANY
            RestApiId: !Ref ColorAdvisorAPI
        WithParams:
          Type: Api
          Properties:
            Path: /shade/{id}
            Method: ANY
            RestApiId: !Ref ColorAdvisorAPI
        WarmingSchedule:
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes)
            Input: '{ "warmer":true,"concurrency":8 }'
  # Rules Engine
  EngineFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/ConsumerLambdaRole
      CodeUri: .build/api/rulesEngine/
      Handler: index.handler
      Timeout: 90
      Events:
        TargetLevel:
          Type: Api
          Properties:
            Path: /rulesEngine/level/{id}
            Method: POST
            RestApiId: !Ref ColorAdvisorAPI
        HairToneOptions:
          Type: Api
          Properties:
            Path: /rulesEngine/tones
            Method: POST
            RestApiId: !Ref ColorAdvisorAPI
        Recommendations:
          Type: Api
          Properties:
            Path: /rulesEngine/recommendations
            Method: POST
            RestApiId: !Ref ColorAdvisorAPI
        ClearCache:
          Type: Api
          Properties:
            Path: /rulesEngine/clearCache
            Method: POST
            RestApiId: !Ref ColorAdvisorAPI
        WarmingSchedule:
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes)
            Input: '{ "warmer":true,"concurrency":8 }'
 
 
  # Layer definitions
  AdvisorNodeModulesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: advisor-node-modules
      Description: Node Modules for the Color Advisor
      ContentUri: lib/node_modules/
      CompatibleRuntimes:
        - nodejs10.x
        - nodejs12.x
        - nodejs16.x
      LicenseInfo: "MIT"
      RetentionPolicy: Retain

  MRModulesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      # LayerName: mr-modules
      Description: MR Modules
      ContentUri: layers/mr-modules-layer/
      CompatibleRuntimes:
        - nodejs10.x
        - nodejs12.x
        - nodejs16.x
      LicenseInfo: "MIT"
      RetentionPolicy: Retain

  ColorAdvisorLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      # LayerName: color-advisor
      Description: Color Advisor
      ContentUri: layers/color-advisor-layer/
      CompatibleRuntimes:
        - nodejs10.x
        - nodejs12.x
        - nodejs16.x
      LicenseInfo: "MIT"
      RetentionPolicy: Retain

Outputs:
  ColorAdvisorApiUrl:
    Description: DNS Endpoint for API GW
    Value: !Sub ${pDomainPrefix}.${pR53HostedZoneName}/coloradvisor/
