AWSTemplateFormatVersion: 2010-09-09
Description: Deploys an Orthanc service into an ECS cluster.

Parameters:

# ECS Settings

  pAlbStackName:
    Type: String
    Description: Name of the ECS cluster stack exporting the required values
    Default: cluster-alb-gusi

  pDesiredCount:
    Type: Number
    Default: 1
    Description: Number of 'service' tasks ECS runs at all times
  
  pMaxTasks:
    Type: Number
    Default: 10
    Description: Maximum number of tasks ECS can run

  pMinTasks:
    Type: Number
    Default: 1
    Description: Minimum number of tasks ECS can run

  pServicePrefix:
    Type: String
    Description: Name of ECS Service
    Default: orthanc-server

  pContainerPort:
    Type: Number
    Description: The port exposed to the EC2 instance from the container
    Default: 8042

  pDicomPort:
    Type: Number
    Description: The port exposed to the EC2 instance from the container
    Default: 4242

  pFargateClusterName:
    Type: String
    Description: "The name of the Fargate Cluster from the exported value"
    Default: "gusi-cluster"

  pVpcId:
    Type: AWS::EC2::VPC::Id

  pSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: "List of subnet IDs for the ECS service"
  
  pNLBStackName:
    Type: String
    Description: Name of the NLB stack exporting the required values
    Default: orthanc-nlb

# Environment
  pEnvironmentTag:
    Type: String
    Description: Environment type for default resource tagging
    AllowedValues:
      - production
      - staging
      - sandbox
      - test
      - development
      - qa
    Default: development


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: ECR Settings
      - Label:
          default: ECS Service Settings
        Parameters:
          - pServicePrefix
          - pDesiredCount
          - pMaxTasks
          - pMinTasks
          - pContainerPort  
      - Label:
          default: Task Definition Settings
        Parameters:
          - pEnvironmentTag
      - Label:
          default: Environment
        Parameters:
          - pEnvironmentTag
    ParameterLabels:
      pServicePrefix:
        default: ECS Service Name Prefix
      pMaxTasks:
        default: ECS Service Max Tasks
      pMinTasks:
        default: ECS Service Min Tasks
      pContainerPort:
        default: ECS Container Port
      pEnvironmentTag:
        default: Environment Tag

Resources:

  serviceSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow all traffic from self and ALB Security Group
        VpcId: !Ref pVpcId
  # Allow everything that has this security group attached
  serviceSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt serviceSecurityGroup.GroupId
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !GetAtt serviceSecurityGroup.GroupId

  serviceVpcIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt serviceSecurityGroup.GroupId
      IpProtocol: -1  # Allows all protocols
      FromPort: -1    # Allows all ports
      ToPort: -1      # Allows all ports
      CidrIp: 10.2.0.0/16

## ECS service.

  ecsService:
    Type: AWS::ECS::Service
    Properties:
      LoadBalancers:
        - ContainerName: !Sub ${pServicePrefix}-service
          ContainerPort: !Ref pContainerPort
          TargetGroupArn: !Join 
            - ''
            - - !ImportValue 
                Fn::Sub: orthancBlueTg-${pAlbStackName}
        - ContainerName: !Sub ${pServicePrefix}-service
          ContainerPort: !Ref pDicomPort
          TargetGroupArn: !Join 
            - ''
            - - !ImportValue 
                Fn::Sub: orthanc-tg-${pNLBStackName}
      Cluster: !Ref pFargateClusterName
      DesiredCount: !Ref pDesiredCount
      TaskDefinition: !Ref pTaskDefinitionArn
      LaunchType: FARGATE
      ServiceName : !Sub ${pServicePrefix}-service
      DeploymentController:
        Type: CODE_DEPLOY
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref pSubnetIds
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt serviceSecurityGroup.GroupId

# Outbound rule for ECS service to EFS
  serviceSecurityGroupEFSOutbound:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt serviceSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      CidrIp: 0.0.0.0/0
# Outbound rule for ECS service to all traffic
  serviceSecurityGroupECROutbound:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt serviceSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0
  
  serviceSecurityGroupPostgresOutbound:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt serviceSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      CidrIp: 0.0.0.0/0


# IAM Role for Auto Scaling
  autoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AutoScalingRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole
      Policies:
        - PolicyName: AutoScalingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:DescribeScalingActivities
                  - autoscaling:DescribeScalingGroups
                  - autoscaling:DescribeScalingPolicies
                  - autoscaling:DescribeScheduledActions
                  - autoscaling:PutScalingPolicy
                  - autoscaling:PutScheduledAction
                Resource: '*'
        - PolicyName: ELBAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - elasticloadbalancing:RegisterTargets
                  - elasticloadbalancing:DeregisterTargets
                  - elasticloadbalancing:DescribeTargetHealth
                Resource: "*"
  serviceSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow all traffic from self and ALB Security Group
        VpcId: !Ref pVpcId


  ecsServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: ecsService
    Properties:
      MaxCapacity: !Ref pMaxTasks
      MinCapacity: !Ref pMinTasks
      ResourceId: !Sub "service/${pFargateClusterName}/${pServicePrefix}-service"
      RoleARN: !GetAtt autoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs


  ecsServiceScaleUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ecsServiceScalingTarget
    Properties:
        PolicyName: scale-up
        PolicyType: StepScaling
        ScalingTargetId: !Ref ecsServiceScalingTarget
        StepScalingPolicyConfiguration:
            AdjustmentType: PercentChangeInCapacity
            Cooldown: 60
            MetricAggregationType: Average
            StepAdjustments:
              - MetricIntervalLowerBound: 0
                ScalingAdjustment: 100

  alarmEcsServiceScaleUp:
    Type: AWS::CloudWatch::Alarm
    DependsOn: ecsServiceScaleUpPolicy
    Properties:
        EvaluationPeriods: 1
        Statistic: Average
        Threshold: 80
        AlarmName: !Sub ${pServicePrefix}-service-high-cpu
        AlarmDescription: !Sub Alarm if ${pServicePrefix}-service is running HIGH on CPU
        Period: 60
        AlarmActions:
          - !Ref ecsServiceScaleUpPolicy
        Namespace: AWS/ECS
        Dimensions:
          - Name: ClusterName
            Value: !Ref pFargateClusterName
          - Name: ServiceName
            Value: !Sub ${pServicePrefix}-service
        ComparisonOperator: GreaterThanThreshold
        MetricName: CPUUtilization

  ecsServiceScaleDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ecsServiceScalingTarget
    Properties:
        PolicyName: scale-down
        PolicyType: StepScaling
        ScalingTargetId: !Ref ecsServiceScalingTarget
        StepScalingPolicyConfiguration:
            AdjustmentType: PercentChangeInCapacity
            Cooldown: 300
            MetricAggregationType: Average
            StepAdjustments:
              - MetricIntervalUpperBound: 0
                ScalingAdjustment: -25

  alarmEcsServiceScaleDown:
    Type: AWS::CloudWatch::Alarm
    Properties:
        EvaluationPeriods: 1
        Statistic: Average
        Threshold: 60
        AlarmName: !Sub ${pServicePrefix}-service-low-cpu
        AlarmDescription: !Sub Alarm if ${pServicePrefix}-service is running LOW on CPU
        Period: 60
        OKActions:
          - !Ref ecsServiceScaleDownPolicy
        Namespace: AWS/ECS
        Dimensions:
          - Name: ClusterName
            Value: !Ref pFargateClusterName
          - Name: ServiceName
            Value: !Sub ${pServicePrefix}-service
        ComparisonOperator: GreaterThanThreshold
        MetricName: CPUUtilization


Outputs:
  ServiceArn:
    Description: "The ARN of the ECS Service"
    Value: !Ref ecsService
    Export:
      Name: !Sub '${AWS::StackName}-ServiceArn'

  ECSServiceName:
    Description: Service Name
    Value: !Ref ecsService