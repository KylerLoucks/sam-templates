AWSTemplateFormatVersion: 2010-09-09
Description: >
  Deploys Wordpress on ECS Fargate using an existing ECS Cluster and Service Discovery Namespace

Parameters:
  pVpcId:
    Type: AWS::EC2::VPC::Id
    Description: ID of the Virtual Private Network (VPC)
  pSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of Subnet IDs for the ECS tasks
  pClusterStackName:
    Type: String
    Description: Name of the cluster stack exporting the required values
    Default: gusi-cluster
  pAlbStackName:
    Type: String
    Description: The name of the ALB stack.
    Default: cluster-alb-gusi
  pDesiredCount:
    Type: Number
    Description: Desired amount of tasks to run on the ECS service.
    Default: 0
  pTaskDefinitionArn:
    Type: String
    Description: Arn of the TaskDefinition used for the service.
    Default: arn:aws:ecs:us-east-1:637423663399:task-definition/wordpress
    
Resources:

  # Security Group
  serviceSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow all traffic from self and ALB Security Group
        VpcId: !Ref pVpcId

  # Allow everything that has this security group attached
  serviceSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt serviceSecurityGroup.GroupId
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !GetAtt serviceSecurityGroup.GroupId

  serviceVpcIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt serviceSecurityGroup.GroupId
      IpProtocol: -1  # Allows all protocols
      FromPort: -1    # Allows all ports
      ToPort: -1      # Allows all ports
      CidrIp: 10.2.0.0/16

  # ECS Service for Wordpress
  wordpressService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !ImportValue 
        Fn::Sub: ${pClusterStackName}:FargateClusterArn
      ServiceName: wordpress-service
      TaskDefinition: !Ref pTaskDefinitionArn
      LoadBalancers:
        - ContainerName: wordpress-container
          ContainerPort: 443
          TargetGroupArn: !Join 
            - ''
            - - !ImportValue 
                Fn::Sub: wordpressBlueTg-${pAlbStackName}
      DeploymentController:
        Type: CODE_DEPLOY
      DesiredCount: !Ref pDesiredCount
      EnableExecuteCommand: true
      EnableECSManagedTags: true
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref pSubnetIds
          SecurityGroups:
            - !GetAtt serviceSecurityGroup.GroupId
          AssignPublicIp: DISABLED
      ServiceRegistries:
        - RegistryArn: !ImportValue 
            Fn::Sub: ${pClusterStackName}:ServiceDiscoveryServiceArn


  # AUTOSCALING
  autoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole
      Policies:
        - PolicyName: AutoScalingPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:DescribeScalingActivities
                  - autoscaling:DescribeScalingGroups
                  - autoscaling:DescribeScalingPolicies
                  - autoscaling:DescribeScheduledActions
                  - autoscaling:PutScalingPolicy
                  - autoscaling:PutScheduledAction
                Resource: "*"
        - PolicyName: ELBAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - elasticloadbalancing:RegisterTargets
                  - elasticloadbalancing:DeregisterTargets
                  - elasticloadbalancing:DescribeTargetHealth
                Resource: "*"

  # Application AutoScaling Target for ECS
  autoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId:
        !Join 
          - "/"
          - 
            - "service"
            - !ImportValue 
                Fn::Sub: "${pClusterStackName}:FargateClusterName"
            - !GetAtt wordpressService.Name           
      RoleARN: !GetAtt autoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  # AutoScaling Policy for CPU Utilization. Creates two cloudwatch alarms for scaling up/down
  autoScalingPolicyCPU:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties: 
      PolicyName: ecs-scale-up-wordpress-cpu-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref autoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 75.0  # Target 75% CPU utilization
        ScaleInCooldown: 300
        ScaleOutCooldown: 300

Outputs:
  ECSServiceName:
    Description: Service Name
    Value: !Ref wordpressService