AWSTemplateFormatVersion: "2010-09-09"
#------------------------------------------------------
# Parameters
#------------------------------------------------------
Parameters:

  pCodestarConnectionArn:
    Type: String
    Description: ARN of the CodeStar Connection.
    Default: "arn:aws:codestar-connections:us-east-1:637423663399:connection/de4142ea-7abe-4eb1-841a-b43f865e1ebb"

  pRepoOwner:
    Type: String
    Description: The owner of the GitHub repository
    Default: "gusi-dcm"

  pRepoName:
    Type: String
    Description: The name of the GitHub repository to use
    Default: "gusi_wordpress"

  pTriggerBranch:
    Type: String
    Description: The branch of the GitHub repository
    Default: Dev

  GitHubArtifactOutput:
    Type: String
    Description: The name of the CodeBuild artifact output
    Default: wordpress-github-artifact

  CodeBuildProjectName:
    Type: String
    Description: CodeBuild project name
    Default: codebuild-wordpress

  EcrRepoName:
    Type: String
    Description: The name of the ECR repository to store the deployment image in
    Default: gusi-wordpress

  ClusterName: 
    Type: String
    Description: The name of the ECS cluster
    Default: gusi-cluster

  ServiceName: 
    Type: String
    Description: The name of the ECS service
    Default: wordpress-service

  CodePipelineName:
    Type: String
    Description: The name of the CodePipeline
    Default: wordpress-pipeline

  CodeBuildArtifactOutput:
    Type: String
    Description: The name of the CodeBuild artifact output
    Default: codebuild-artifact-wordpress

  ContainerName:
    Type: String
    Description: The name of the Container 
    Default: wordpress-container


  
  CodePipelineS3BucketPrefix:
    Type: String
    Description: The name of the S3 Bucket 
    Default: wordpress-pipeline

  pAppName:
    Type: String
    Description: The name of the app
    Default: wordpress

  TerminateWaitTime:
    Type: Number
    Description: Wait time before terminating old environment
    Default: 60

  DeployAlarmEnabled:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false

  # CodeDeploy params
  TrafficRoutingType:
    Type: String
    Description: Type of traffic routing (Canary or TimeBasedLinear)
    AllowedValues:
      - Canary
      - TimeBasedLinear
      - AllAtOnce

  TrafficPercentage:
    Type: Number
    Description: Percentage of traffic to route (Only applies to Canary or Linear routing types)
    Default: 10
  TrafficInterval:
    Type: Number
    Description: Interval in minutes for routing traffic (Only applies to Canary or Linear routing types)
    Default: 10

  ProdListenerArn:
    Type: String
    Description: ARN of the ALB listener used for PROD traffic
    Default: arn:aws:elasticloadbalancing:us-east-1:637423663399:listener/app/cluste-loadB-lDUQxFlJ1aCU/9144c5ec0de9bf37/b87554779b30f294

  TestListenerArn:
    Type: String
    Description: (Optional) Test Listener ARN
    Default: ""
  
  BlueTargetGroupName:
    Type: String
    Description: Name of target group used for Blue traffic
    Default: wordpress-TG-HTTPS
  
  GreenTargetGroupName:
    Type: String
    Description: Name of target group used for Green traffic
    Default: orthanc-TG-HTTPS

  BlueTgArnSuffix:
    Type: String
    Description: Target Group ARN suffix for Blue target group
    Default: arn:aws:elasticloadbalancing:us-east-1:637423663399:targetgroup/wordpress-TG-HTTPS/06c7297b3507ad1f

  GreenTgArnSuffix:
    Type: String
    Description: Target Group ARN suffix for Blue target group
    Default: arn:aws:elasticloadbalancing:us-east-1:637423663399:targetgroup/wordpress-TG-HTTPS/06c7297b3507ad1f

  AlbArnSuffix:
    Type: String
    Description: ARN Suffix for the ALB
    Default: arn:aws:elasticloadbalancing:us-east-1:637423663399:loadbalancer/app/cluste-loadB-lDUQxFlJ1aCU/9144c5ec0de9bf37


Conditions:
  IsCanary: !Equals [!Ref TrafficRoutingType, "Canary"]
  IsLinear: !Equals [!Ref TrafficRoutingType, "TimeBasedLinear"]
  IsAllAtOnce: !Equals [!Ref TrafficRoutingType, "AllAtOnce"]
  TestListenerArnsProvided: !Not [ !Equals [ !Ref TestListenerArn, '' ] ]

Resources:


  #------------------------------------------------------
  # IAM role for codedpipeline
  #------------------------------------------------------
  RoleForCodePipeline:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
      Policies:
        - PolicyName: CodePipelinePolicyDemo
          PolicyDocument: |
            {
                "Statement": [
                    {
                        "Action": [
                            "iam:PassRole"
                        ],
                        "Resource": "*",
                        "Effect": "Allow",
                        "Condition": {
                            "StringEqualsIfExists": {
                                "iam:PassedToService": [
                                    "cloudformation.amazonaws.com",
                                    "elasticbeanstalk.amazonaws.com",
                                    "ec2.amazonaws.com",
                                    "ecs-tasks.amazonaws.com"
                                ]
                            }
                        }
                    },
                    {
                        "Action": [
                            "codedeploy:CreateDeployment",
                            "codedeploy:GetApplication",
                            "codedeploy:GetApplicationRevision",
                            "codedeploy:GetDeployment",
                            "codedeploy:GetDeploymentConfig",
                            "codedeploy:RegisterApplicationRevision"
                        ],
                        "Resource": "*",
                        "Effect": "Allow"
                    },
                    {
                        "Action": [
                            "codestar-connections:UseConnection"
                        ],
                        "Resource": "*",
                        "Effect": "Allow"
                    },
                    {
                        "Action": [
                            "elasticbeanstalk:*",
                            "ec2:*",
                            "elasticloadbalancing:*",
                            "autoscaling:*",
                            "cloudwatch:*",
                            "s3:*",
                            "sns:*",
                            "cloudformation:*",
                            "rds:*",
                            "sqs:*",
                            "ecs:*"
                        ],
                        "Resource": "*",
                        "Effect": "Allow"
                    },
                    {
                        "Action": [
                            "lambda:InvokeFunction",
                            "lambda:ListFunctions"
                        ],
                        "Resource": "*",
                        "Effect": "Allow"
                    },
                    {
                        "Action": [
                            "opsworks:CreateDeployment",
                            "opsworks:DescribeApps",
                            "opsworks:DescribeCommands",
                            "opsworks:DescribeDeployments",
                            "opsworks:DescribeInstances",
                            "opsworks:DescribeStacks",
                            "opsworks:UpdateApp",
                            "opsworks:UpdateStack"
                        ],
                        "Resource": "*",
                        "Effect": "Allow"
                    },
                    {
                        "Action": [
                            "cloudformation:CreateStack",
                            "cloudformation:DeleteStack",
                            "cloudformation:DescribeStacks",
                            "cloudformation:UpdateStack",
                            "cloudformation:CreateChangeSet",
                            "cloudformation:DeleteChangeSet",
                            "cloudformation:DescribeChangeSet",
                            "cloudformation:ExecuteChangeSet",
                            "cloudformation:SetStackPolicy",
                            "cloudformation:ValidateTemplate"
                        ],
                        "Resource": "*",
                        "Effect": "Allow"
                    },
                    {
                        "Action": [
                            "codebuild:BatchGetBuilds",
                            "codebuild:StartBuild",
                            "codebuild:BatchGetBuildBatches",
                            "codebuild:StartBuildBatch"
                        ],
                        "Resource": "*",
                        "Effect": "Allow"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "devicefarm:ListProjects",
                            "devicefarm:ListDevicePools",
                            "devicefarm:GetRun",
                            "devicefarm:GetUpload",
                            "devicefarm:CreateUpload",
                            "devicefarm:ScheduleRun"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "servicecatalog:ListProvisioningArtifacts",
                            "servicecatalog:CreateProvisioningArtifact",
                            "servicecatalog:DescribeProvisioningArtifact",
                            "servicecatalog:DeleteProvisioningArtifact",
                            "servicecatalog:UpdateProduct"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "cloudformation:ValidateTemplate"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "ecr:DescribeImages"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "states:DescribeExecution",
                            "states:DescribeStateMachine",
                            "states:StartExecution"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "appconfig:StartDeployment",
                            "appconfig:StopDeployment",
                            "appconfig:GetDeployment"
                        ],
                        "Resource": "*"
                    }
                ],
                "Version": "2012-10-17"
            }

  #------------------------------------------------------
  # IAM role for codebuild 
  #------------------------------------------------------
  RoleForCodeBuild:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-CodeBuildPolicyBlueGreen
          PolicyDocument: !Sub 
          - |
            {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Resource": [
                          "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/debug",
                          "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/debug:*"
                      ],
                      "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                      ]
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                        "s3:PutObject",
                        "s3:GetObject",
                        "s3:GetObjectVersion",
                        "s3:GetBucketAcl",
                        "s3:GetBucketLocation",
                        "s3:ListBucket"
                      ],
                      "Resource": [
                        "arn:aws:s3:::${CodePipelineS3BucketPrefix}/*",
                        "arn:aws:s3:::${CodePipelineS3BucketPrefix}"
                      ]
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                        "s3:GetObject",
                        "s3:PutObject",
                        "s3:GetObjectVersion",
                        "s3:ListBucket"
                      ],
                      "Resource": [
                        "arn:aws:s3:::laravel-pipeline-artifacts-${AWS::AccountId}-${AWS::Region}/*",
                        "arn:aws:s3:::laravel-pipeline-artifacts-${AWS::AccountId}-${AWS::Region}"
                     ]
                  },
                  {
                        "Action":
                            "codestar-connections:UseConnection",
                        "Resource": "*",
                        "Effect": "Allow"
                    },
                  {
                        "Action": [
                            "codebuild:BatchGetBuilds",
                            "codebuild:StartBuild",
                            "codebuild:BatchGetBuildBatches",
                            "codebuild:StartBuildBatch"
                        ],
                        "Resource": "*",
                        "Effect": "Allow"
                    },
                  { 
                      "Action": "secretsmanager:GetSecretValue",
                      "Resource": "*",
                      "Effect": "Allow"
                  },
                  {
                      "Effect": "Allow",
                      "Resource": [
                          "arn:${AWS::Partition}:s3:::${CodePipelineS3BucketPrefix}/*",
                          "arn:aws:s3:::laravel-pipeline-artifacts-637423663399-us-east-1/pipeline-standard-la/codebuild-/1AYRrRD",
                          "arn:aws:s3:::laravel-pipeline-artifacts-637423663399-us-east-1/pipeline-standard-la/codebuild-/1AYRrRD/*"
                      ],
                      "Action": [
                          "s3:PutObject",
                          "s3:GetObject",
                          "s3:GetObjectVersion",
                          "s3:GetBucketAcl",
                          "s3:GetBucketLocation"
                      ]
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "codebuild:CreateReportGroup",
                          "codebuild:CreateReport",
                          "codebuild:UpdateReport",
                          "codebuild:BatchPutTestCases",
                          "codebuild:BatchPutCodeCoverages"
                      ],
                      "Resource": [
                          "arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/debug-*"
                      ]
                  },
                  {
                    "Action": ["ecr:*"],
                    "Resource": "*",
                    "Effect": "Allow"
                  },
                  {
                       "Action": [
                           "codecommit:CancelUploadArchive",
                           "codecommit:GetBranch",
                           "codecommit:GetCommit",
                           "codecommit:GetRepository",
                           "codecommit:GetUploadArchiveStatus",
                           "codecommit:UploadArchive",
                           "codecommit:GitPull"
                       ],
                       "Resource": "*",
                       "Effect": "Allow"
                  }
              ]
            }
          - CodePipelineS3BucketPrefix: !Ref CodePipelineS3BucketPrefix 
            
  #------------------------------------------------------
  # CodeBuild project 
  #------------------------------------------------------
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W32
            reason: "skip using encryption value for demo purpose"
    Properties:
      Name: !Ref CodeBuildProjectName
      ServiceRole: !Ref RoleForCodeBuild
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        ComputeType: BUILD_GENERAL1_SMALL
        PrivilegedMode: true
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: /aws/codebuild/debug
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub
        - |
          version: 0.2
          env:
            shell: bash
            variables:
              REPO_NAME: ${EcrRepoName}
              CODEBUILD_RESOLVED_SOURCE_VERSION: $CODEBUILD_RESOLVED_SOURCE_VERSION
              TAG_NAME: "latest"
              CONTAINER_NAME: ${ContainerName}
          phases:
            install:
              runtime-versions:
                php: 8.2
              commands:
                - echo Installing Composer dependencies...
                - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
                - php composer-setup.php
                - php -r "unlink('composer-setup.php');"
                - php composer.phar install --ignore-platform-reqs
            pre_build:
              commands:
                - export TAG_NAME=$(date +%s)
            build:
              commands:
                - echo $CONTAINER_NAME
                - docker build --platform linux/amd64 -t $REPO_NAME:$CODEBUILD_RESOLVED_SOURCE_VERSION-$TAG_NAME -t $REPO_NAME:latest .
                - docker tag $REPO_NAME:$CODEBUILD_RESOLVED_SOURCE_VERSION-$TAG_NAME ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/$REPO_NAME:$CODEBUILD_RESOLVED_SOURCE_VERSION-$TAG_NAME
                - docker tag $REPO_NAME:$CODEBUILD_RESOLVED_SOURCE_VERSION-$TAG_NAME ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/$REPO_NAME:latest
                - printf '[{"name":"%s","imageUri":"%s"}]' $CONTAINER_NAME ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/$REPO_NAME:$CODEBUILD_RESOLVED_SOURCE_VERSION-$TAG_NAME > imagedefinitions.json
                - cat imagedefinitions.json 
            post_build:
              commands:
                - aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
                - docker push ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/$REPO_NAME:$CODEBUILD_RESOLVED_SOURCE_VERSION-$TAG_NAME
                - docker push ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/$REPO_NAME:latest
          artifacts:
            files:
              - imagedefinitions.json
            name: ${CodeBuildArtifactOutput}
        - CodeBuildArtifactOutput: !Ref CodeBuildArtifactOutput
          EcrRepoName: !Ref EcrRepoName
          ContainerName: !Ref ContainerName
      Cache:
        Type: NO_CACHE
      Tags:
        - Key: name
          Value: !Ref CodeBuildProjectName


  #------------------------------------------------------
  # CodePipeline - Artifact Bucket & Cleanup Lambda
  #------------------------------------------------------

  artifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${pAppName}-pipeline-artifacts-${AWS::AccountId}-${AWS::Region}
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # Artifact bucket cleanup
  DeleteObjectStorage:
    Type: Custom::S3DeleteObjectsLambda
    Properties:
      ServiceToken: !GetAtt DeleteS3ObjectsFunction.Arn
      Bucket: !Ref artifactBucket

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: S3Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Sid: AllowLogging
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              -
                Sid: DeleteBucketObjects
                Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:ListBucketVersions
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                Resource:
                  - !Sub arn:aws:s3:::${artifactBucket}
                  - !Sub arn:aws:s3:::${artifactBucket}/*

  DeleteS3ObjectsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Deletes objects from buckets provisioned by CloudFormation
      Handler: index.handler
      Runtime: python3.11
      Role: !GetAtt LambdaRole.Arn
      Timeout: 120
      Code:
        ZipFile: |
          import os
          import json
          import cfnresponse
          import boto3
          import logging

          from botocore.exceptions import ClientError

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          s3 = boto3.resource('s3')

          def handler(event, context):
            logger.info("Received event: %s" % json.dumps(event))
            bucket = s3.Bucket(event['ResourceProperties']['Bucket'])

            result = cfnresponse.SUCCESS

            try:
              if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                result = cfnresponse.SUCCESS
              elif event['RequestType'] == 'Delete':
                result = delete_objects(bucket)
            except ClientError as e:
              logger.error('Error: %s', e)
              result = cfnresponse.FAILED

            cfnresponse.send(event, context, result, {})

          def delete_objects(bucket):
            bucket.object_versions.delete()
            bucket.objects.all().delete()
            return cfnresponse.SUCCESS

  cleanupLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${DeleteS3ObjectsFunction}
      RetentionInDays: 7
  
  #------------------------------------------------------
  # CodePipeline
  #------------------------------------------------------
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref CodePipelineName
      RoleArn: !GetAtt RoleForCodePipeline.Arn
      ArtifactStore:
        Location: !Ref artifactBucket
        Type: S3
      Stages:
        - Name: Source
          Actions:
            - Name: GitHubSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              Configuration:
                FullRepositoryId: !Sub ${pRepoOwner}/${pRepoName}
                ConnectionArn: !Ref pCodestarConnectionArn
                BranchName: !Ref pTriggerBranch
                DetectChanges: true
                OutputArtifactFormat: CODEBUILD_CLONE_REF
              OutputArtifacts:
                - Name: !Ref GitHubArtifactOutput
        - Name: Build
          Actions:
            - Name: CodeBuild
              ActionTypeId:
                   Owner: AWS
                   Category: Build
                   Version: 1
                   Provider: CodeBuild
              RunOrder: 1
              Configuration:
                ProjectName: !Ref CodeBuildProject
                PrimarySource: !Ref GitHubArtifactOutput
              InputArtifacts:
                - Name: !Ref GitHubArtifactOutput
              OutputArtifacts:
                - Name: !Ref CodeBuildArtifactOutput
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                   Owner: AWS
                   Category: Deploy
                   Version: 1
                   Provider: CodeDeployToECS
              Configuration:
                ApplicationName: !Ref CodeDeployApp
                DeploymentGroupName: !Ref CodeDeployDeploymentGroup
                AppSpecTemplatePath: appspec.yml
                AppSpecTemplateArtifact: !Ref CodeBuildArtifactOutput
                TaskDefinitionTemplateArtifact: !Ref CodeBuildArtifactOutput
                TaskDefinitionTemplatePath: taskdef.json
              InputArtifacts:
                - Name: !Ref CodeBuildArtifactOutput

  #------------------------------------------------------
  # Blue/Green CodeDeploy
  #------------------------------------------------------
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ServiceName}-codedeploy-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service: "codedeploy.amazonaws.com"
      Policies:
        - PolicyName: !Sub "${ServiceName}-codedeploy-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "passEcsTaskRole"
                Effect: "Allow"
                Action:
                  - "iam:PassRole"
                  - "iam:GetRole"
                Resource: "*"
              - Sid: "s3Artifacts"
                Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketAcl"
                  - "s3:GetBucketLocation"
                Resource:
                  - !GetAtt artifactBucket.Arn
                  - !Sub "${artifactBucket.Arn}/*"
              - Sid: "misc"
                Effect: "Allow"
                Action:
                  - "ecs:DescribeServices"
                  - "ecs:CreateTaskSet"
                  - "ecs:UpdateServicePrimaryTaskSet"
                  - "ecs:DeleteTaskSet"
                  - "ecs:RegisterTaskDefinition"
                  - "elasticloadbalancing:DescribeTargetGroups"
                  - "elasticloadbalancing:DescribeListeners"
                  - "elasticloadbalancing:ModifyListener"
                  - "elasticloadbalancing:DescribeRules"
                  - "elasticloadbalancing:ModifyRule"
                  - "lambda:InvokeFunction"
                  - "cloudwatch:DescribeAlarms"
                  - "sns:Publish"
                  - "s3:GetObject"
                  - "s3:GetObjectMetadata"
                  - "s3:GetObjectVersion"
                Resource: "*"


  CodeDeployApp:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Ref pAppName
      ComputePlatform: ECS
      # Tags: 
      #   - Tag


  DeploymentConfig:
    Type: AWS::CodeDeploy::DeploymentConfig
    Properties:
      DeploymentConfigName: !Sub "${ServiceName}-deploy-config"
      ComputePlatform: ECS
      TrafficRoutingConfig:
        !If
          - IsCanary
          - CanaryRoutingConfig:
              Type: "Canary"
              TimeBasedCanary:
                CanaryPercentage: !Ref TrafficPercentage
                CanaryInterval: !Ref TrafficInterval
          - !If
            - IsLinear
            - LinearRoutingConfig:
                Type: "TimeBasedLinear"
                TimeBasedLinear:
                  LinearPercentage: !Ref TrafficPercentage
                  LinearInterval: !Ref TrafficInterval
            - !If
              - IsAllAtOnce
              - Type: "AllAtOnce"
              - !Ref "AWS::NoValue"

  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApp
      DeploymentGroupName: !Sub ${pAppName}
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentConfigName: !Ref DeploymentConfig

      ECSServices:
        - ClusterName: !Ref ClusterName
          ServiceName: !Ref ServiceName

      AlarmConfiguration:
        Enabled: !Ref DeployAlarmEnabled
        Alarms:
          - Name: !Ref UnhealthyHostsBlueAlarm
          - Name: !Ref UnhealthyHostsGreenAlarm

      AutoRollbackConfiguration:
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE
          - DEPLOYMENT_STOP_ON_ALARM

      DeploymentStyle:
        DeploymentOption: WITH_TRAFFIC_CONTROL
        DeploymentType: BLUE_GREEN

      BlueGreenDeploymentConfiguration:
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
          WaitTimeInMinutes: 0
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: !Ref TerminateWaitTime

      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - ProdTrafficRoute:
              ListenerArns: 
                - !Ref ProdListenerArn
            TargetGroups:
              - Name: !Ref BlueTargetGroupName
              - Name: !Ref GreenTargetGroupName
            TestTrafficRoute:
              !If 
                - TestListenerArnsProvided
                - ListenerArns: 
                    - !Ref TestListenerArn
                - !Ref "AWS::NoValue"


  UnhealthyHostsBlueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ServiceName}-unhealthy-hosts-blue"
      AlarmDescription: "Monitors unhealthy blue target group targets"
      Namespace: "AWS/ApplicationELB"
      MetricName: "UnHealthyHostCount"
      Statistic: "Average"
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      Dimensions:
        - Name: "TargetGroup"
          Value: !Ref BlueTgArnSuffix
        - Name: "LoadBalancer"
          Value: !Ref AlbArnSuffix
      ActionsEnabled: true

  UnhealthyHostsGreenAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ServiceName}-unhealthy-hosts-green"
      AlarmDescription: "Monitors unhealthy green target group targets"
      Namespace: "AWS/ApplicationELB"
      MetricName: "UnHealthyHostCount"
      Statistic: "Average"
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      Dimensions:
        - Name: "TargetGroup"
          Value: !Ref GreenTgArnSuffix
        - Name: "LoadBalancer"
          Value: !Ref AlbArnSuffix
      ActionsEnabled: true