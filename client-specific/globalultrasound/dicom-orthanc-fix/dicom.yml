AWSTemplateFormatVersion: 2010-09-09
Description: Deploys an Orthanc service into an ECS cluster.

Parameters:

# ECS Settings

  pAlbStackName:
    Type: String
    Description: Name of the ECS cluster stack exporting the required values
    Default: cluster-alb-gusi

  pDesiredCount:
    Type: Number
    Default: 1
    Description: Number of 'service' tasks ECS runs at all times
  
  pMaxTasks:
    Type: Number
    Default: 10
    Description: Maximum number of tasks ECS can run

  pMinTasks:
    Type: Number
    Default: 1
    Description: Minimum number of tasks ECS can run

  pServicePrefix:
    Type: String
    Description: Name of ECS Service
    Default: orthanc-server

  pContainerPort:
    Type: Number
    Description: The port exposed to the EC2 instance from the container
    Default: 8042

  pDicomPort:
    Type: Number
    Description: The port exposed to the EC2 instance from the container
    Default: 4242

  pContainerMemory:
    Type: Number
    Description: The amount (in MiB) of memory to present to the container
    Default: 512

  pContainerCpu:
    Type: Number
    Description: The amount of CPU to present to the container
    Default: 256

  pFargateClusterName:
    Type: String
    Description: "The name of the Fargate Cluster from the exported value"
    Default: "gusi-cluster"

  pVpcId:
    Type: AWS::EC2::VPC::Id

  pSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: "List of subnet IDs for the ECS service"
  
  pNLBStackName:
    Type: String
    Description: Name of the NLB stack exporting the required values
    Default: NLB-blue-green
  
  pDicomServicePrefix:
    Type: String
    Description: Name of the Orthanc Dicom Server.
    Default: orthanc-dicom


  pOrthancTaskDefinitionArn:
    Type: String
    Description: Arn of the TaskDefinition used for the Orthanc service.
    Default: arn:aws:ecs:us-east-1:637423663399:task-definition/orthanc-server-service

  pDicomTaskDefinitionArn:
    Type: String
    Description: Arn of the TaskDefinition used for the Dicom service.
    Default: arn:aws:ecs:us-east-1:637423663399:task-definition/orthanc-dicom-service

# Environment
  pEnvironmentTag:
    Type: String
    Description: Environment type for default resource tagging
    AllowedValues:
      - production
      - staging
      - sandbox
      - test
      - development
      - qa
    Default: development


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: ECR Settings
      - Label:
          default: ECS Service Settings
        Parameters:
          - pServicePrefix
          - pDesiredCount
          - pMaxTasks
          - pMinTasks
          - pContainerPort
          - pContainerMemory
          - pContainerCpu
      - Label:
          default: Task Definition Settings
        Parameters:
          - pEnvironmentTag
      - Label:
          default: Environment
        Parameters:
          - pEnvironmentTag
    ParameterLabels:
      pServicePrefix:
        default: ECS Service Name Prefix
      pMaxTasks:
        default: ECS Service Max Tasks
      pMinTasks:
        default: ECS Service Min Tasks
      pContainerPort:
        default: ECS Container Port
      pContainerMemory:
        default: Container RAM needed
      pContainerCpu:
        default: Container CPU needed
      pEnvironmentTag:
        default: Environment Tag

Resources:

  serviceSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow all traffic from self and ALB Security Group
        VpcId: !Ref pVpcId
  # Allow everything that has this security group attached
  serviceSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt serviceSecurityGroup.GroupId
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !GetAtt serviceSecurityGroup.GroupId

  serviceVpcIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt serviceSecurityGroup.GroupId
      IpProtocol: -1  # Allows all protocols
      FromPort: -1    # Allows all ports
      ToPort: -1      # Allows all ports
      CidrIp: 10.2.0.0/16

  ## ECS service.

  ecsService:
    Type: AWS::ECS::Service
    Properties:
      LoadBalancers:
        - ContainerName: !Sub ${pServicePrefix}-service
          ContainerPort: !Ref pContainerPort
          TargetGroupArn: !Join 
            - ''
            - - !ImportValue 
                Fn::Sub: orthancBlueTg-${pAlbStackName}
        - ContainerName: !Sub ${pServicePrefix}-service
          ContainerPort: !Ref pDicomPort
          TargetGroupArn: !Join 
            - ''
            - - !ImportValue 
                Fn::Sub: orthanc-blue-tg-${pNLBStackName}
      Cluster: !Ref pFargateClusterName
      DesiredCount: !Ref pDesiredCount
      TaskDefinition: !Ref pOrthancTaskDefinitionArn
      LaunchType: FARGATE
      ServiceName : !Sub ${pServicePrefix}-service
      DeploymentController:
        Type: CODE_DEPLOY
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref pSubnetIds
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt serviceSecurityGroup.GroupId


  ## DICOM ECS Service
  dicomEcsService:
    Type: AWS::ECS::Service
    Properties:
      LoadBalancers:
        - ContainerName: !Sub ${pDicomServicePrefix}-service
          ContainerPort: !Ref pDicomPort
          TargetGroupArn: !Join 
            - ''
            - - !ImportValue 
                Fn::Sub: orthanc-blue-tg-${pNLBStackName}
      Cluster: !Ref pFargateClusterName
      DesiredCount: !Ref pDesiredCount
      TaskDefinition: !Ref pDicomTaskDefinitionArn
      LaunchType: FARGATE
      ServiceName: !Sub ${pDicomServicePrefix}-service
      DeploymentController:
        Type: CODE_DEPLOY
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref pSubnetIds
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt serviceSecurityGroup.GroupId


# Outbound rule for ECS service to EFS
  serviceSecurityGroupEFSOutbound:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt serviceSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      CidrIp: 0.0.0.0/0
# Outbound rule for ECS service to all traffic
  serviceSecurityGroupECROutbound:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt serviceSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0
  
  serviceSecurityGroupPostgresOutbound:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt serviceSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      CidrIp: 0.0.0.0/0

Outputs:

  ServiceArn:
    Description: "The ARN of the ECS Service"
    Value: !Ref ecsService
    Export:
      Name: !Sub '${AWS::StackName}-ServiceArn'
