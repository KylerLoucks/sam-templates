

AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Creates a MySQL ECS task that has a large EBS volume configured at launch

Parameters:
  pAppName:
    Type: String
    Default: pr1
    Description: Application Name
  pVpcId:
    Type: AWS::EC2::VPC::Id
    Description: ID of the Virtual Private Network (VPC)
    Default: vpc-09ef4a53e9290ca17
  pPrivateSubnetId1:
    Type: String
    Default: subnet-01086857935bfcf34
  pPrivateSubnetId2:
    Type: String
    Default: subnet-056e57e04fea05dd5

  # Container Ports
  pMySQLPort:
    Type: Number
    Default: 3306

  # # Secrets
  # pMySQLSecretArn:
  #   Type: String
  #   Description: >
  #     Arn of the AWS Secrets Manager secret to use for MySQL container username and password
  #     NOTE: the secret name cannot contain characters other than: a-zA-Z0-9_.-
  #     NOTE2: the secret key/value must be 'username' and 'password'


  pMysqlEcrImageUri:
    Type: String
    Default: mysql:8.0 # 174743933558.dkr.ecr.us-east-1.amazonaws.com/mysql-ephemeral:20240509
    Description: > 
      URI of the ECR or Dockerhub image used for MySQL Task Definition. 
      e.g. <account-id>.dkr.ecr.us-east-1.amazonaws.com/repository:tag




Resources:

  # BACKEND SERVICES
  serviceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all traffic from self and ALB Security Group
      VpcId: !Ref pVpcId

  # Allow everything that has this security group attached
  serviceSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt serviceSecurityGroup.GroupId
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !GetAtt serviceSecurityGroup.GroupId

  serviceVpcIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt serviceSecurityGroup.GroupId
      IpProtocol: -1  # Allows all protocols
      FromPort: -1    # Allows all ports
      ToPort: -1      # Allows all ports
      CidrIp: 10.20.0.0/16  # Allow traffic from VPC

  # ECS task role
  taskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        # Ecs Exec into Fargate containers https://aws.amazon.com/blogs/containers/new-using-amazon-ecs-exec-access-your-containers-fargate-ec2/
        # aws ecs execute-command --region us-east-1 --cluster <cluster-name> --task <task-id> --container mysql --command "/bin/bash"
        # Also requires `ssmmessages` Interface VPC endpoint: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-exec.html#ecs-exec-troubleshooting
        # Requires the SSM Session Manager plugin for the AWS CLI (https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html)
        - PolicyName: EcsExec
          PolicyDocument: 
            Version: 2012-10-17
            Statement:
              - Sid: AllowEcsExec
                Effect: Allow
                Action:
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                Resource: "*"
        - PolicyName: CloudWatchLogs
          PolicyDocument: 
            Version: 2012-10-17
            Statement:
              - Sid: AllowCreateLogGroup
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Sid: AllowLogStreams
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/ecs/*:*"
        
  taskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: Secrets
          PolicyDocument: 
            Version: 2012-10-17
            Statement:
              - Sid: GetSecrets
                Action: secretsmanager:GetSecretValue
                Effect: Allow
                Resource: arn:aws:secretsmanager:*:*:secret:*
              - Sid: GetSSMParams
                Action: ssm:GetParameters
                Effect: Allow
                Resource: arn:aws:ssm:*:*:parameter/*
      # Allows pulling ECR image and pushing logs to CW
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # Role used for managing ECS EBS Volume creation for ECS Tasks
  # You can view the EBS volumes used per task in the EBS Volumes Console
  # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/infrastructure_IAM_role.html
  ecsInfrastructureRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action: sts:AssumeRole
      # Allows ec2:CreateVolume for the specified task
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSInfrastructureRolePolicyForVolumes


  mysqlTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${pAppName}-mysql
      ExecutionRoleArn: !GetAtt taskExecutionRole.Arn
      TaskRoleArn: !GetAtt taskRole.Arn
      Cpu: 512
      Memory: 1024
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      EphemeralStorage:
        SizeInGiB: 30
      ContainerDefinitions:
        - Name: mysql
          Image: !Ref pMysqlEcrImageUri
          PortMappings:
            - ContainerPort: !Ref pMySQLPort
              Protocol: tcp
          Environment:
            - Name: MYSQL_ROOT_PASSWORD
              Value: root
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref mysqlLogGroup
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: ecs
          MountPoints:
            - SourceVolume: mysql
              ContainerPath: /var/lib/mysql # Must use volume that is pre-populated with mysql data. Otherwise, this location will be empty.
      Volumes:
        - Name: mysql
          ConfiguredAtLaunch: true # Configure additional EBS volumes at launch
          # Host:
          #   SourcePath: /mnt/mysql-data  # Specify the mount path for the instance storage

  mysqlLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/mysql/${pAppName}
      RetentionInDays: 7

  mysqlService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref fargateCluster
      ServiceName: mysql
      DeploymentController: 
        Type: ECS
      DesiredCount: 1
      EnableECSManagedTags: true
      EnableExecuteCommand: true
      LaunchType: FARGATE
      # CapacityProviderStrategy:
      #   - Base: 0
      #     CapacityProvider: !Ref CapacityProvider
      #     Weight: 1
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
        DeploymentCircuitBreaker:
          Enable: false
          Rollback: true
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !GetAtt serviceSecurityGroup.GroupId
          Subnets: 
            - !Ref pPrivateSubnetId1
            - !Ref pPrivateSubnetId2
      PropagateTags: SERVICE
      ServiceRegistries: 
        - RegistryArn: !GetAtt mysqlServiceDiscoveryService.Arn
          Port: !Ref pMySQLPort
      TaskDefinition: !Ref mysqlTaskDefinition
      # Configure EBS Volume at launch time for each task in the service.
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-servicemanagedebsvolumeconfiguration.html
      VolumeConfigurations: 
        - Name: mysql # Must match the name defined in the `Volume` object of the Task Definition
          ManagedEBSVolume:
            RoleArn: !GetAtt ecsInfrastructureRole.Arn
            VolumeType: gp3
            # SizeInGiB: 300
            FilesystemType: ext4 # Specify the same filesystem type that the volume was using when the snapshot was created.
            SnapshotId: snap-06934e13d7d90fae2 # Here we can specify the Snapshot of an EBS volume to use.

            
            # We can grab the latest created snapshot ID as long as we provide a tag-key that makes sense. 
            # aws ec2 describe-snapshots --filters Name=tag-key,Values=ephemeral-mysql --query "Snapshots[].[SnapshotId,StartTime]" --output json | jq -r 'sort_by(.[1]) | last | .[0]'
      Tags: 
        - Key: managed-by
          Value: SAM
        - Key: ephemeral:app
          Value: !Ref pAppName


  fargateCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${pAppName}-cluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Base: 0 # how many tasks (minimum) can be ran on this strategy
          Weight: 50
        - CapacityProvider: FARGATE
          Base: 20
          Weight: 50
      ServiceConnectDefaults: # AWS Service Connect
        Namespace: !GetAtt serviceDiscoveryNameSpace.Arn

# CLOUD MAP
  serviceDiscoveryNameSpace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Vpc: !Ref pVpcId
      Name: !Sub ${pAppName}.cloudmap.internal


  # mysql
  mysqlServiceDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: mysql-ecs # Name must be unique from what is given for ECS service 'ServiceConnectConfiguration.PortName'. 
      Description: Service discovery for mongo service
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 60
          - Type: SRV
            TTL: 60
        RoutingPolicy: MULTIVALUE
      NamespaceId: !GetAtt serviceDiscoveryNameSpace.Id