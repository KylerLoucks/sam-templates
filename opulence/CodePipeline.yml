AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >
  Github V2 Source action, Deploy to Tagged EC2 Instances

Parameters:
  pRepoOwner:
    Type: String
    Description: Repository Owner Name. If the repo owner is an organization, enter organization name.
    ConstraintDescription: "Please specify the Repository Owner name"
    Default: ElijahMason

  pRepoName:
    Type: String
    Description: Name of the repository.
    ConstraintDescription: "Please specify the Repository name."
    Default: opulence_web

  pBranchName:
    Type: String
    Description: Name of the branch that commits will trigger the pipeline.
    ConstraintDescription: "Please specify the Branch name."
    Default: master

  pCodeStarConnection:
    Type: String
    Description: ARN of the CodeStar connection
    ConstraintDescription: "Please specify the CodeStar connection ARN."
    Default: arn:aws:codestar-connections:us-west-2:730335364791:connection/305524cb-927f-43f8-aa41-dc2a2dafe14d
    
Metadata:
  AWS::CloudFormation::Interface:
    ParameterLabels:
      pRepoOwner:
        default: Repository Owner
      pRepoName:
        default: Repository Name
      pCodeStarConnection:
        default: CodeStar connection ARN
      pBranchName:
        default: Branch Name
      pStageNamePrefix:
        default: Stage Name Prefix

    ParameterGroups:
      - Label:
          default: CodePipeline Source Provider Settings
        Parameters:
          - pCodeStarConnection
          - pRepoOwner
          - pRepoName
          - pBranchName


Resources:

  # CodePipeline IAM Role
  codePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub codepipeline-role-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: s3Artifacts
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource:
                  - !Sub arn:aws:s3:::${artifactBucket}
                  - !Sub arn:aws:s3:::${artifactBucket}/*
        - PolicyName: codeStarConnection
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - codestar-connections:UseConnection
                Resource: "*"
        - PolicyName: codeBuild
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuildBatches
                  - codebuild:StartBuildBatch
                Resource: "*"
        - PolicyName: deployEC2
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:GetApplication
                  - codedeploy:GetApplicationRevision
                  - codedeploy:GetDeployment
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:RegisterApplicationRevision
                Resource: "*"
              - Effect: Allow
                Action:
                  - elasticbeanstalk:*
                  - ec2:*
                  - elasticloadbalancing:*
                  - autoscaling:*
                  - cloudwatch:*
                  - s3:*
                  - sns:*
                  - cloudformation:*
                  - rds:*
                  - sqs:*
                  - ecs:*
                Resource: "*"
        - PolicyName: passRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: "*"
                Condition:
                  StringEqualsIfExists:
                    iam:PassedToService:
                      - cloudformation.amazonaws.com
                      - elasticbeanstalk.amazonaws.com
                      - ec2.amazonaws.com
                      - ecs-tasks.amazonaws.com

  codeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: Opulence2
      ComputePlatform: Server # Server = EC2/On-Premises


  codeDeploymentGroupServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub codedeploy-role-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole

  codeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref codeDeployApplication # name of existing code deploy application to associate the group with
      DeploymentGroupName: PROD
      ServiceRoleArn: !GetAtt codeDeploymentGroupServiceRole.Arn
      DeploymentStyle:
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL # WITH_TRAFFIC_CONTROL | ALB
        DeploymentType: IN_PLACE
      
      # Instances with the tags in this tag group are what get targeted for deployment
      Ec2TagSet: 
        Ec2TagSetList:
          - Ec2TagGroup:
              - Key: CodeDeployEC2
                Type: KEY_AND_VALUE
                Value: PROD
      DeploymentConfigName: CodeDeployDefault.AllAtOnce

      # LoadBalancerInfo:
      #   TargetGroupInfoList: 
      #     - Name: MyTargetGroup.TargetGroupName # TODO update this name
      AutoRollbackConfiguration:
        Enabled: False



  codePipeline: 
    Type: AWS::CodePipeline::Pipeline 
    Properties: 
      Name: !Sub ${AWS::StackName}
      RoleArn: !GetAtt codePipelineServiceRole.Arn
      Stages: 
        - Name: Source
          Actions: 
            - Name: SourceAction
              # Variables to be referenced in other Actions. Ex: #{SourceVariables.CommitId} https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-variables.html
              Namespace: SourceVariables
              ActionTypeId: 
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              Configuration:

                # CodeStar connection ARN
                ConnectionArn: !Ref pCodeStarConnection
                
                # Owner and Name of the repository ex: some-user/my-repo
                FullRepositoryId: !Sub ${pRepoOwner}/${pRepoName}
                BranchName: !Ref pBranchName
                OutputArtifactFormat: CODE_ZIP

                # trigger the pipeline on every new commit
                DetectChanges: true
              OutputArtifacts:
                - Name: SourceOutput 
        - Name: !Sub Approval
          Actions:
            - Name: ManualApproval
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: 1
              Configuration:
                CustomData: "Please approve this change. Commit message: #{SourceVariables.CommitMessage}"
                ExternalEntityLink: !Sub "https://github.com/${pRepoOwner}/${pRepoName}/commit/#{SourceVariables.CommitId}"
        - Name: !Sub Deployment
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: 1
              Configuration:
                ApplicationName: !Ref codeDeployApplication
                DeploymentGroupName: !Ref codeDeployDeploymentGroup
              InputArtifacts:
                - Name: SourceOutput
      ArtifactStore: 
        Type: S3 
        Location: !Ref artifactBucket
        # default encryption is used
        # EncryptionKey:
        #   Id: arn:aws:kms:useast-1:ACCOUNT-ID:key/KEY-ID
        #   Type: KMS

  artifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub pipeline-artifacts-${AWS::StackName}-${AWS::AccountId}-${AWS::Region}
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # Artifact bucket cleanup
  DeleteObjectStorage:
    Type: Custom::S3DeleteObjectsLambda
    Properties:
      ServiceToken: !GetAtt DeleteS3ObjectsFunction.Arn
      Bucket: !Ref artifactBucket

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: S3Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Sid: AllowLogging
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              -
                Sid: DeleteBucketObjects
                Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:ListBucketVersions
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                Resource:
                  - !Sub arn:aws:s3:::${artifactBucket}
                  - !Sub arn:aws:s3:::${artifactBucket}/*

  DeleteS3ObjectsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Deletes objects from buckets provisioned by CloudFormation
      Handler: index.handler
      Runtime: python3.11
      Role: !GetAtt LambdaRole.Arn
      Timeout: 120
      Code:
        ZipFile: |
          import os
          import json
          import cfnresponse
          import boto3
          import logging

          from botocore.exceptions import ClientError

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          s3 = boto3.resource('s3')

          def handler(event, context):
            logger.info("Received event: %s" % json.dumps(event))
            bucket = s3.Bucket(event['ResourceProperties']['Bucket'])

            result = cfnresponse.SUCCESS

            try:
              if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                result = cfnresponse.SUCCESS
              elif event['RequestType'] == 'Delete':
                result = delete_objects(bucket)
            except ClientError as e:
              logger.error('Error: %s', e)
              result = cfnresponse.FAILED

            cfnresponse.send(event, context, result, {})

          def delete_objects(bucket):
            bucket.object_versions.delete()
            bucket.objects.all().delete()
            return cfnresponse.SUCCESS

  cleanupLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${DeleteS3ObjectsFunction}
      RetentionInDays: 7




  

  

