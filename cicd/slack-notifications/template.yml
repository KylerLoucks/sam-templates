AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >
  Creates a CodePipeline pipeline that deploys all github changes to an S3 bucket and sends pipeline execution notifications to SNS.
  Sends notifications to Slack. Uses GitHub version 2 source action.

Parameters:
  pBucketName:
    Type: String
    Description: Name of the S3 bucket to deploy new changes to.
    ConstraintDescription: "Please specify the Bucket name."
    Default: test-kloucks-us-west-2

  pRepoName:
    Type: String
    Description: Name of the repository.
    ConstraintDescription: "Please specify the Repository name."
    Default: eb-flaskapp

  pBranchName:
    Type: String
    Description: Name of the branch that commits will trigger the pipeline.
    Default: master
    ConstraintDescription: "Please specify the Branch name."

  pCodeStarConnection:
    Type: String
    Description: ARN of the CodeStar connection
    ConstraintDescription: "Please specify the CodeStar connection ARN."
    Default: arn:aws:codestar-connections:us-west-2:570351108046:connection/ab6e9367-d76a-4fbf-a330-71419c18cf07
    
  pRepoOwner:
    Type: String
    Description: Repository Owner Name. If the repo owner is an organization, enter organization name.
    ConstraintDescription: "Please specify the Repository Owner name"
    Default: cloud303-kloucks

  pStageNamePrefix:
    Type: String
    Description: Prefix to give for manual approval stage names
    AllowedValues:
      - PROD
      - DEV
    ConstraintDescription: "Please specify an environment tag"
    Default: PROD

Resources:



  # =================================
  # ========= CICD PIPELINE =========
  # =================================
  # CodePipeline IAM Role
  codePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub codepipeline-role-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: s3Artifacts
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource: 
                  - !Sub "arn:aws:s3:::${s3ArtifactBucketCodePipeline}"
                  - !Sub "arn:aws:s3:::${s3ArtifactBucketCodePipeline}/*"
        - PolicyName: s3DeploymentBucket
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource: 
                  - !Sub "arn:aws:s3:::${pBucketName}"
                  - !Sub "arn:aws:s3:::${pBucketName}/*"
        - PolicyName: codeStarConnection
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - codestar-connections:UseConnection
                Resource: "*"

  codePipeline: 
    Type: AWS::CodePipeline::Pipeline 
    Properties: 
      Name: !Sub ${AWS::StackName} # c303-prod-faststak-cloudformation-cicd
      RoleArn: !GetAtt codePipelineServiceRole.Arn
      Stages: 
        - Name: Source
          Actions: 
            - Name: SourceAction
              # Variables to be referenced in other Actions. Ex: #{SourceVariables.CommitId} https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-variables.html
              Namespace: SourceVariables
              ActionTypeId: 
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              Configuration:

                # CodeStar connection ARN
                ConnectionArn: !Ref pCodeStarConnection
                
                # Owner and Name of the repository ex: some-user/my-repo
                FullRepositoryId: !Sub ${pRepoOwner}/${pRepoName}
                BranchName: !Ref pBranchName
                OutputArtifactFormat: CODE_ZIP

                # trigger the pipeline on every new commit
                DetectChanges: true
              OutputArtifacts:
                - Name: SourceOutput 
        - Name: !Sub ${pStageNamePrefix}-Approval
          Actions:
            - Name: ManualApproval
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: 1
              Configuration:
                CustomData: "Please approve this change. Commit message: #{SourceVariables.CommitMessage}"
                ExternalEntityLink: !Sub "https://github.com/${pRepoOwner}/${pRepoName}/commit/#{SourceVariables.CommitId}"
        - Name: !Sub ${pStageNamePrefix}-Deploy
          Actions:
            - Name: S3
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: 1
              Configuration:
                BucketName: !Ref pBucketName
                Extract: true
              InputArtifacts:
                - Name: SourceOutput
      ArtifactStore: 
        Type: S3 
        Location: !Ref s3ArtifactBucketCodePipeline
        # default encryption is used
        # EncryptionKey:
        #   Id: arn:aws:kms:useast-1:ACCOUNT-ID:key/KEY-ID
        #   Type: KMS

  s3ArtifactBucketCodePipeline:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-artifacts-${AWS::Region}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256


  # ================================
  # ======== SLACK NOTIFIER ========
  # ================================
  lambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Sample Lambda # Change this
      CodeUri: slack-notifier/
      Handler: app.handler
      Runtime: python3.10
      Role: !GetAtt lambdaRole.Arn
      Environment:
        Variables:
          ACCOUNT_ID: !Sub ${AWS::AccountId}
          SLACK_WEBHOOK_URL: ""
      Timeout: 240

                      

  permissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref lambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: 
        !GetAtt eventBridgeRule.Arn

  eventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Name: CodePipelineStateChangeRule
      EventPattern:
        source:
          - aws.codepipeline
        detail-type:
          - CodePipeline Pipeline Execution State Change
          - CodePipeline Action Execution State Change
        detail:
          state:
            - STARTED
            - SUCCEEDED
            - FAILED
            - CANCELED
          type:
            category:
              - Source
              - Approval
              - Build
              - Deploy

        resources:
          - !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${codePipeline}"
      Targets:
        - Arn: !GetAtt lambdaFunction.Arn
          Id: targetFunction

  lambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: GetPipelineExecution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - codepipeline:GetPipelineExecution
                Resource: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${codePipeline}"

  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${lambdaFunction}
      RetentionInDays: 90

Outputs:

  pipeline:
    Description: CodePipeline CI/CD pipeline Name
    Value: !Ref codePipeline

  pipelineServiceRole:
    Description: CodePipeline IAM Service Role
    Value: !GetAtt codePipelineServiceRole.Arn

  Version:
    Description: Template Version
    Value: pipeline-deploy-s3-sns-0.1